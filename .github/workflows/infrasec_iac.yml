########################################
# üõ°Ô∏è WORKFLOW REUSABLE: InfraSec & IaC Quality Analysis
# Autor: @turingsecurity (basado en tu estilo Docker)
# Escanea Terraform, Ansible, Helm y YAML (Kubernetes)
# Busca malas pr√°cticas, vulnerabilidades y errores de configuraci√≥n
########################################

name: InfraSec & IaC Quality Analysis

on:
  workflow_call:
    inputs:
      source_repo:
        description: "Repositorio con la infraestructura a analizar"
        required: true
        type: string
      source_ref:
        description: "Branch o tag a analizar"
        required: false
        type: string
        default: "main"
    secrets:
      GITHUB_TOKEN:
        required: true

permissions:
  contents: read
  security-events: write
  pull-requests: write
  issues: write

jobs:
  iac-analysis:
    name: üîç InfraSec & IaC Quality Scan
    runs-on: ubuntu-latest
    steps:
      ########################################
      # üîπ CHECKOUT
      ########################################
      - name: üì¶ Checkout del repositorio de infraestructura
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.source_repo }}
          ref: ${{ inputs.source_ref }}
          fetch-depth: 0

      ########################################
      # üîπ TERRAFORM
      ########################################
      - name: üåç Terraform Validate
        continue-on-error: true
        run: |
          echo "‚ñ∂Ô∏è Ejecutando terraform validate"
          if find . -name "*.tf" -type f | grep -q .; then
            terraform init -backend=false || true
            terraform validate || true
          else
            echo "‚ö†Ô∏è No se encontraron archivos Terraform"
          fi

      - name: üîê tfsec - Terraform Security Scan
        continue-on-error: true
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: .
          sarif_file: tfsec-results.sarif

      - name: üìã Subir tfsec SARIF
        if: always()
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: tfsec-results.sarif
          category: terraform

      - name: üß© Checkov - IaC Security Scan
        continue-on-error: true
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: üìã Subir Checkov SARIF
        if: always()
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif
          category: checkov

      ########################################
      # üîπ ANSIBLE
      ########################################
      - name: ‚öôÔ∏è Ansible Lint
        continue-on-error: true
        run: |
          echo "‚ñ∂Ô∏è Ejecutando ansible-lint"
          if find . -name "*.yml" -o -name "*.yaml" | xargs grep -l "hosts:" 2>/dev/null | grep -q .; then
            pip install ansible ansible-lint
            ansible-lint -v || true
          else
            echo "‚ö†Ô∏è No se encontraron playbooks de Ansible"
          fi

      ########################################
      # üîπ HELM y YAML
      ########################################
      - name: ‚õµ Helm Lint
        continue-on-error: true
        run: |
          echo "‚ñ∂Ô∏è Analizando Helm Charts"
          if find . -name Chart.yaml -type f | grep -q .; then
            find . -name Chart.yaml -exec dirname {} \; | while read chart; do
              echo "üì¶ Linting chart: $chart"
              helm lint "$chart" || true
            done
          else
            echo "‚ö†Ô∏è No se encontraron Helm Charts"
          fi

      - name: üß† Kube-score (Helm / YAML best practices)
        continue-on-error: true
        run: |
          echo "‚ñ∂Ô∏è Ejecutando kube-score"
          if find . -type f \( -name "*.yaml" -o -name "*.yml" \) | grep -q .; then
            wget -qO- https://github.com/zegl/kube-score/releases/latest/download/kube-score_$(uname -s)_$(uname -m).tar.gz | tar xvz
            sudo mv kube-score /usr/local/bin/
            find . -type f \( -name "*.yaml" -o -name "*.yml" \) -print0 | xargs -0 kube-score score --ignore-test container-security-context || true
          else
            echo "‚ö†Ô∏è No se encontraron archivos YAML"
          fi

      - name: üßπ YAML Lint
        continue-on-error: true
        run: |
          echo "‚ñ∂Ô∏è Ejecutando yamllint"
          if find . -type f \( -name "*.yaml" -o -name "*.yml" \) | grep -q .; then
            pip install yamllint
            yamllint -f parsable . || true
          else
            echo "‚ö†Ô∏è No se encontraron archivos YAML"
          fi

      ########################################
      # üîπ REPORT CONSOLIDATION
      ########################################
      - name: üìä Generar reporte consolidado
        if: always()
        run: |
          echo "# üõ°Ô∏è InfraSec & IaC Report" > IAC_REPORT.md
          echo "" >> IAC_REPORT.md
          echo "## üîç Herramientas ejecutadas" >> IAC_REPORT.md
          echo "- Terraform: tfsec, checkov, validate" >> IAC_REPORT.md
          echo "- Ansible: ansible-lint" >> IAC_REPORT.md
          echo "- Helm / YAML: helm lint, kube-score, yamllint" >> IAC_REPORT.md
          echo "" >> IAC_REPORT.md
          echo "## üìã Resultados" >> IAC_REPORT.md
          echo "Consulta la pesta√±a 'Security' o descarga los artefactos del pipeline." >> IAC_REPORT.md
          echo "" >> IAC_REPORT.md
          echo "### üß† Recomendaciones" >> IAC_REPORT.md
          echo "- Usa 'terraform fmt' y 'ansible-lint --fix' para mantener formato." >> IAC_REPORT.md
          echo "- Aplica buenas pr√°cticas CIS/NIST mediante Checkov policies." >> IAC_REPORT.md
          echo "- Considera habilitar escaneo autom√°tico en PRs." >> IAC_REPORT.md

      - name: üì§ Subir artefactos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: iac-security-reports
          path: |
            IAC_REPORT.md
            tfsec-results.sarif
            checkov-results.sarif
          retention-days: 30

      ########################################
      # üîπ ISSUE AUTOMATION
      ########################################
      - name: üö® Crear issue si hay hallazgos cr√≠ticos
        if: always()
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const findings = ['tfsec-results.sarif', 'checkov-results.sarif'].filter(f => fs.existsSync(f));
            let critical = 0;
            for (const f of findings) {
              const report = JSON.parse(fs.readFileSync(f, 'utf8'));
              for (const run of report.runs || []) {
                for (const result of run.results || []) {
                  if (result.level === 'error' || result.level === 'high') critical++;
                }
              }
            }
            if (critical > 0) {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üö® ${critical} hallazgos cr√≠ticos detectados en IaC`,
                body: `Se detectaron ${critical} findings cr√≠ticos durante el an√°lisis de infraestructura.\n\nConsulta los artefactos en el workflow **InfraSec & IaC Quality Analysis**.`,
                labels: ['security', 'iac', 'critical']
              });
            }