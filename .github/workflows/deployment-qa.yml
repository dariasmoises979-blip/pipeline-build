########################################
# 🔄 WORKFLOW REUSABLE: Find Latest Image & Update K8s
# Busca la última imagen en Docker Hub creada por el pipeline
# y actualiza los manifiestos de Kubernetes automáticamente
# deployment-qa.yml
########################################

name: Reusable Find & Update K8s Images

# 🔧 Definir como workflow reusable con inputs configurables
on:
  workflow_call:
    inputs:
      docker_image:
        description: 'Nombre de la imagen Docker (sin tag, ej: mi-app)'
        required: true
        type: string
      dockerhub_username:
        description: 'Usuario de Docker Hub (texto literal, no secret)'
        required: true
        type: string
      environment:
        description: 'Entorno de deployment (pro/pre/staging/dev)'
        required: true
        type: string
      k8s_manifests_path:
        description: 'Ruta a los manifiestos de Kubernetes'
        required: false
        type: string
        default: 'kubernetes/entornos'
      git_user_name:
        description: 'Nombre del usuario para el commit'
        required: false
        type: string
        default: 'GitHub Actions Bot'
      git_user_email:
        description: 'Email del usuario para el commit'
        required: false
        type: string
        default: 'github-actions[bot]@users.noreply.github.com'
      target_branch:
        description: 'Rama donde hacer el commit (default: rama actual)'
        required: false
        type: string
        default: ''
      create_pr:
        description: 'Crear PR en lugar de commit directo (true/false)'
        required: false
        type: boolean
        default: false
      tag_pattern:
        description: 'Patrón de tag a buscar (ej: pro-*, staging-*)'
        required: false
        type: string
        default: ''
    secrets:
      DOCKERHUB_TOKEN:
        description: 'Token de Docker Hub para consultar API'
        required: true
      GH_PAT:
        description: 'Personal Access Token para hacer commits (opcional si se usa GITHUB_TOKEN)'
        required: false

jobs:
  # ═══════════════════════════════════════════════════════════
  # 🔍 JOB: FIND LATEST IMAGE & UPDATE K8S MANIFESTS
  # ═══════════════════════════════════════════════════════════
  find-and-update:
    name: Find Latest Image & Update K8s
    runs-on: ubuntu-latest
    
    steps:
      # ═══════════════════════════════════════════════════════════
      # 📥 PASO 1: CHECKOUT DEL REPOSITORIO
      # ═══════════════════════════════════════════════════════════
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT || github.token }}
          ref: ${{ inputs.target_branch || github.ref }}

      # ═══════════════════════════════════════════════════════════
      # 🐳 PASO 2: BUSCAR ÚLTIMA IMAGEN EN DOCKER HUB
      # ═══════════════════════════════════════════════════════════
      - name: Find latest Docker image
        id: find_image
        env:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          DOCKERHUB_USERNAME: ${{ inputs.dockerhub_username }}
          DOCKER_IMAGE: ${{ inputs.docker_image }}
          ENVIRONMENT: ${{ inputs.environment }}
          TAG_PATTERN: ${{ inputs.tag_pattern }}
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔍 BUSCANDO ÚLTIMA IMAGEN EN DOCKER HUB"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Repositorio: ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}"
          echo "🌍 Entorno: ${ENVIRONMENT}"
          
          # Determinar patrón de búsqueda
          if [[ -n "${TAG_PATTERN}" ]]; then
            SEARCH_PATTERN="${TAG_PATTERN}"
          else
            SEARCH_PATTERN="${ENVIRONMENT}-"
          fi
          echo "🔎 Patrón de búsqueda: ${SEARCH_PATTERN}*"
          echo ""
          
          # Obtener token de Docker Hub
          echo "🔐 Obteniendo token de autenticación..."
          TOKEN_RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"${DOCKERHUB_USERNAME}\",\"password\":\"${DOCKERHUB_TOKEN}\"}" \
            https://hub.docker.com/v2/users/login/)
          
          HUB_TOKEN=$(echo "${TOKEN_RESPONSE}" | jq -r '.token // empty')
          
          if [[ -z "${HUB_TOKEN}" || "${HUB_TOKEN}" == "null" ]]; then
            echo "❌ Error: No se pudo obtener token de Docker Hub"
            echo "Respuesta: ${TOKEN_RESPONSE}"
            exit 1
          fi
          
          echo "✅ Token obtenido exitosamente"
          echo ""
          
          # Consultar tags de la imagen
          echo "📋 Consultando tags disponibles..."
          TAGS_RESPONSE=$(curl -s -H "Authorization: Bearer ${HUB_TOKEN}" \
            "https://hub.docker.com/v2/repositories/${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}/tags?page_size=100")
          
          # Verificar si hay error
          if echo "${TAGS_RESPONSE}" | jq -e '.message' > /dev/null 2>&1; then
            echo "❌ Error al consultar Docker Hub:"
            echo "${TAGS_RESPONSE}" | jq -r '.message'
            exit 1
          fi
          
          # Filtrar tags que coincidan con el patrón del entorno
          echo "🔎 Filtrando tags con patrón '${SEARCH_PATTERN}'..."
          MATCHING_TAGS=$(echo "${TAGS_RESPONSE}" | jq -r --arg pattern "${SEARCH_PATTERN}" \
            '.results[] | select(.name | startswith($pattern)) | "\(.last_updated)|\(.name)"' | sort -r)
          
          if [[ -z "${MATCHING_TAGS}" ]]; then
            echo "❌ No se encontraron tags que coincidan con el patrón '${SEARCH_PATTERN}'"
            echo ""
            echo "📋 Tags disponibles:"
            echo "${TAGS_RESPONSE}" | jq -r '.results[].name' | head -20
            exit 1
          fi
          
          echo "✅ Tags encontrados:"
          echo "${MATCHING_TAGS}" | head -10
          echo ""
          
          # Obtener el tag más reciente (primera línea después de ordenar)
          LATEST_TAG=$(echo "${MATCHING_TAGS}" | head -1 | cut -d'|' -f2)
          LATEST_DATE=$(echo "${MATCHING_TAGS}" | head -1 | cut -d'|' -f1)
          
          FULL_IMAGE="${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${LATEST_TAG}"
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ IMAGEN MÁS RECIENTE ENCONTRADA"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🐳 Imagen completa: ${FULL_IMAGE}"
          echo "🏷️  Tag: ${LATEST_TAG}"
          echo "📅 Fecha: ${LATEST_DATE}"
          echo "🔗 Docker Hub: https://hub.docker.com/r/${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}/tags"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Guardar outputs
          echo "full_image=${FULL_IMAGE}" >> $GITHUB_OUTPUT
          echo "tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "updated_date=${LATEST_DATE}" >> $GITHUB_OUTPUT

      # ═══════════════════════════════════════════════════════════
      # 🔍 PASO 3: VERIFICAR ESTRUCTURA DE MANIFIESTOS
      # ═══════════════════════════════════════════════════════════
      - name: Verify manifests structure
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📂 ESTRUCTURA DE MANIFIESTOS KUBERNETES"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          if [[ -d "${{ inputs.k8s_manifests_path }}" ]]; then
            echo "✅ Directorio encontrado: ${{ inputs.k8s_manifests_path }}"
            echo ""
            echo "📋 Archivos YAML encontrados:"
            find "${{ inputs.k8s_manifests_path }}" -type f \( -name "*.yaml" -o -name "*.yml" \) -exec echo "   • {}" \;
            echo ""
            echo "🔍 Buscando referencias de imagen existentes:"
            grep -r "image:" "${{ inputs.k8s_manifests_path }}" --include="*.yaml" --include="*.yml" || echo "   ℹ️  No se encontraron referencias 'image:'"
          else
            echo "❌ Directorio no encontrado: ${{ inputs.k8s_manifests_path }}"
            exit 1
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ═══════════════════════════════════════════════════════════
      # 🔄 PASO 4: ACTUALIZAR IMÁGENES EN MANIFIESTOS
      # ═══════════════════════════════════════════════════════════
      - name: Update image tags in manifests
        id: update
        env:
          MANIFESTS_PATH: ${{ inputs.k8s_manifests_path }}
          FULL_IMAGE: ${{ steps.find_image.outputs.full_image }}
          DOCKER_IMAGE: ${{ inputs.docker_image }}
          DOCKERHUB_USER: ${{ inputs.dockerhub_username }}
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔄 ACTUALIZANDO MANIFIESTOS KUBERNETES"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          if [[ ! -d "${MANIFESTS_PATH}" ]]; then
            echo "❌ Error: Directorio ${MANIFESTS_PATH} no existe"
            exit 1
          fi
          
          # Buscar y actualizar archivos YAML
          FILES_UPDATED=0
          TOTAL_REPLACEMENTS=0
          
          while IFS= read -r -d '' file; do
            echo ""
            echo "📄 Procesando: ${file}"
            
            # Buscar líneas con 'image:' que contengan la imagen objetivo
            if grep -q "image:.*${DOCKERHUB_USER}/${DOCKER_IMAGE}" "${file}"; then
              # Crear backup
              cp "${file}" "${file}.bak"
              
              # Contar ocurrencias antes
              BEFORE_COUNT=$(grep -c "image:.*${DOCKERHUB_USER}/${DOCKER_IMAGE}" "${file}" || echo "0")
              
              # Actualizar imagen usando sed
              # Busca: image: usuario/imagen:cualquier-tag
              # Reemplaza por: image: usuario/imagen:nuevo-tag
              sed -i "s|image: ${DOCKERHUB_USER}/${DOCKER_IMAGE}:.*|image: ${FULL_IMAGE}|g" "${file}"
              
              # También manejar casos sin espacios después de ':'
              sed -i "s|image:${DOCKERHUB_USER}/${DOCKER_IMAGE}:.*|image: ${FULL_IMAGE}|g" "${file}"
              
              # Contar ocurrencias después
              AFTER_COUNT=$(grep -c "image: ${FULL_IMAGE}" "${file}" || echo "0")
              
              if [[ "${AFTER_COUNT}" -gt 0 ]]; then
                echo "   ✅ Actualizado: ${AFTER_COUNT} ocurrencia(s)"
                FILES_UPDATED=$((FILES_UPDATED + 1))
                TOTAL_REPLACEMENTS=$((TOTAL_REPLACEMENTS + AFTER_COUNT))
                
                # Mostrar diferencias
                echo "   📝 Cambios realizados:"
                diff -u "${file}.bak" "${file}" | grep "^[-+]" | grep "image:" || echo "   ℹ️  Sin cambios visibles"
              else
                echo "   ℹ️  Sin cambios"
                mv "${file}.bak" "${file}"  # Restaurar si no hubo cambios
              fi
            else
              echo "   ⏭️  No contiene la imagen ${DOCKERHUB_USER}/${DOCKER_IMAGE}"
            fi
          done < <(find "${MANIFESTS_PATH}" -type f \( -name "*.yaml" -o -name "*.yml" \) -print0)
          
          # Limpiar backups
          find "${MANIFESTS_PATH}" -name "*.bak" -delete
          
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 RESUMEN DE ACTUALIZACIÓN"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📁 Archivos actualizados: ${FILES_UPDATED}"
          echo "🔄 Total de reemplazos: ${TOTAL_REPLACEMENTS}"
          echo "🐳 Nueva imagen: ${FULL_IMAGE}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Guardar outputs
          echo "files_updated=${FILES_UPDATED}" >> $GITHUB_OUTPUT
          echo "total_replacements=${TOTAL_REPLACEMENTS}" >> $GITHUB_OUTPUT

      # ═══════════════════════════════════════════════════════════
      # 📊 PASO 5: VERIFICAR CAMBIOS
      # ═══════════════════════════════════════════════════════════
      - name: Check for changes
        id: git_status
        run: |
          git diff --quiet || echo "has_changes=true" >> $GITHUB_OUTPUT
          
          if git diff --quiet; then
            echo "ℹ️  No hay cambios para commitear"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Se detectaron cambios en los manifiestos"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo ""
            echo "📝 Archivos modificados:"
            git diff --name-only
          fi

      # ═══════════════════════════════════════════════════════════
      # 🔐 PASO 6: CONFIGURAR GIT
      # ═══════════════════════════════════════════════════════════
      - name: Configure Git
        if: steps.git_status.outputs.has_changes == 'true'
        run: |
          git config --global user.name "${{ inputs.git_user_name }}"
          git config --global user.email "${{ inputs.git_user_email }}"

      # ═══════════════════════════════════════════════════════════
      # 💾 PASO 7A: COMMIT DIRECTO (si create_pr = false)
      # ═══════════════════════════════════════════════════════════
      - name: Commit and push changes
        if: steps.git_status.outputs.has_changes == 'true' && inputs.create_pr == false
        run: |
          ENVIRONMENT="${{ inputs.environment }}"
          IMAGE_TAG="${{ steps.find_image.outputs.tag }}"
          UPDATED_DATE="${{ steps.find_image.outputs.updated_date }}"
          
          git add ${{ inputs.k8s_manifests_path }}
          git commit -m "🚀 Update K8s image to ${IMAGE_TAG} [${ENVIRONMENT}]

          - Image: ${{ steps.find_image.outputs.full_image }}
          - Environment: ${ENVIRONMENT}
          - Image Date: ${UPDATED_DATE}
          - Files updated: ${{ steps.update.outputs.files_updated }}
          - Total replacements: ${{ steps.update.outputs.total_replacements }}
          - Triggered by: ${{ github.actor }}
          
          Auto-generated by workflow: ${{ github.workflow }}"
          
          git push
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ CAMBIOS COMMITEADOS Y PUSHEADOS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ═══════════════════════════════════════════════════════════
      # 🔀 PASO 7B: CREAR PULL REQUEST (si create_pr = true)
      # ═══════════════════════════════════════════════════════════
      - name: Create Pull Request
        if: steps.git_status.outputs.has_changes == 'true' && inputs.create_pr == true
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GH_PAT || github.token }}
          commit-message: |
            🚀 Update K8s image to ${{ steps.find_image.outputs.tag }} [${{ inputs.environment }}]
          branch: update-k8s-image-${{ inputs.environment }}-${{ steps.find_image.outputs.tag }}
          delete-branch: true
          title: "🚀 Update K8s Image: ${{ inputs.docker_image }}:${{ steps.find_image.outputs.tag }}"
          body: |
            ## 🐳 Kubernetes Image Update
            
            **Environment:** `${{ inputs.environment }}`
            **New Image:** `${{ steps.find_image.outputs.full_image }}`
            **Image Date:** `${{ steps.find_image.outputs.updated_date }}`
            
            ### 📊 Changes Summary
            - **Files Updated:** ${{ steps.update.outputs.files_updated }}
            - **Total Replacements:** ${{ steps.update.outputs.total_replacements }}
            
            ### 🔗 Related Links
            - [Docker Hub Image](https://hub.docker.com/r/${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}/tags)
            - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            *Auto-generated by `${{ github.workflow }}` triggered by @${{ github.actor }}*
          labels: |
            kubernetes
            deployment
            automated
            ${{ inputs.environment }}

      # ═══════════════════════════════════════════════════════════
      # ✅ PASO 8: REPORTE FINAL
      # ═══════════════════════════════════════════════════════════
      - name: Final Report
        if: always()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 REPORTE FINAL DE ACTUALIZACIÓN"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🐳 Imagen: ${{ steps.find_image.outputs.full_image }}"
          echo "🏷️  Tag: ${{ steps.find_image.outputs.tag }}"
          echo "📅 Fecha imagen: ${{ steps.find_image.outputs.updated_date }}"
          echo "🌍 Entorno: ${{ inputs.environment }}"
          echo "📁 Archivos actualizados: ${{ steps.update.outputs.files_updated }}"
          echo "🔄 Reemplazos totales: ${{ steps.update.outputs.total_replacements }}"
          echo "💾 Cambios detectados: ${{ steps.git_status.outputs.has_changes }}"
          echo "🔀 Crear PR: ${{ inputs.create_pr }}"
          echo "👤 Ejecutado por: ${{ github.actor }}"
          echo "🕐 Fecha: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "🔗 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"