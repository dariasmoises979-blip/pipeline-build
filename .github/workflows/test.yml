########################################
# 🧪 WORKFLOW REUSABLE: Test Workflow
# Ejecuta pruebas unitarias, de integración, lint y análisis de calidad.
########################################

name: Reusable Test Workflow

on:
  workflow_call:
    inputs:
      external_repo:
        required: true
        type: string
      external_repo_ref:
        required: true
        type: string
      external_repo_path:
        required: false
        type: string
        default: './app-repo'
      python_version:
        required: false
        type: string
        default: '3.12'
      coverage_threshold:
        required: false
        type: number
        default: 80
      sonar_args:
        required: false
        type: string
        default: ''
      projectBaseDir:
        required: false
        type: string
        default: ''
      run_integration_tests:
        required: false
        type: boolean
        default: true
      run_security_scan:
        required: false
        type: boolean
        default: true
    secrets:
      EXTERNAL_REPO_TOKEN: 
        required: true
      SONAR_TOKEN:
        required: false

permissions:
  actions: read
  contents: write
  security-events: write
  checks: write
  pull-requests: write

env:
  PYTHONUNBUFFERED: '1'
  PIP_DISABLE_PIP_VERSION_CHECK: '1'
  PIP_NO_CACHE_DIR: '0'

jobs:
  # ═══════════════════════════════════════════════════════════
  # ⚙️ JOB 0: PREPARACIÓN Y VALIDACIÓN
  # ═══════════════════════════════════════════════════════════
  setup:
    name: ⚙️ Setup & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      python-version: ${{ steps.python-info.outputs.version }}
      has-requirements: ${{ steps.check-files.outputs.has-requirements }}
      has-tests: ${{ steps.check-files.outputs.has-tests }}
    
    steps:
      - name: 🔄 Clonar el repositorio app
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.external_repo }}
          ref: ${{ inputs.external_repo_ref }}
          path: ${{ inputs.external_repo_path }}
          fetch-depth: 0
          token: ${{ secrets.EXTERNAL_REPO_TOKEN }}

      - name: 📁 Verificar estructura del proyecto
        id: check-files
        working-directory: ${{ inputs.external_repo_path }}
        run: |
          echo "🔍 Verificando estructura del proyecto..."
          
          if [ -f "local/requirements.txt" ]; then
            echo "✅ Encontrado: local/requirements.txt"
            echo "has-requirements=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No encontrado: local/requirements.txt"
            echo "has-requirements=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -d "system_info_app" ] || [ -d "system_info_app/test" ]; then
            echo "✅ Encontrado: directorio de system_info_app"
            echo "has-tests=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No encontrado: directorio de system_info_app"
            echo "has-tests=false" >> $GITHUB_OUTPUT
          fi
          
          echo "📂 Estructura del proyecto:"
          ls -la || true

      - name: 🐍 Configurar Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: 📝 Info de Python
        id: python-info
        run: |
          echo "version=${{ steps.setup-python.outputs.python-version }}" >> $GITHUB_OUTPUT
          echo "🐍 Python version: $(python --version)"

      - name: 🔑 Generar cache key
        id: cache-key
        working-directory: ${{ inputs.external_repo_path }}
        run: |
          HASH=$(find . -name "requirements*.txt" -type f -exec sha256sum {} \; 2>/dev/null | sha256sum | cut -d' ' -f1 || echo "no-requirements")
          echo "key=${{ runner.os }}-pip-${{ inputs.python_version }}-${HASH}" >> $GITHUB_OUTPUT

      - name: 💾 Cache de dependencias pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ inputs.python_version }}-

      - name: 📥 Instalar dependencias base
        working-directory: ${{ inputs.external_repo_path }}
        run: |
          python -m pip install --upgrade pip setuptools wheel
          
          if [ -f "local/requirements.txt" ]; then
            pip install -r local/requirements.txt
          fi
          
          pip install \
            pytest pytest-cov pytest-html pytest-xdist \
            flake8 black pylint isort \
            bandit safety \
            coverage[toml]

      - name: 🗜️ Empaquetar código del proyecto
        run: |
          tar -czf app-build.tar.gz ${{ inputs.external_repo_path }}
          echo "✅ Tamaño: $(du -h app-build.tar.gz | cut -f1)"

      - name: 📤 Subir artefacto
        uses: actions/upload-artifact@v4
        with:
          name: app-source-${{ github.run_id }}
          path: app-build.tar.gz
          retention-days: 1
          compression-level: 9

  # ═══════════════════════════════════════════════════════════
  # 🧪 JOB 1: TESTS UNITARIOS CON COBERTURA
  # ═══════════════════════════════════════════════════════════
  test-unit:
    name: 🧪 Unit Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: setup
    
    steps:
      - name: 💾 Descargar artefacto
        uses: actions/download-artifact@v4
        with:
          name: app-source-${{ github.run_id }}

      - name: 📦 Extraer código
        run: tar -xzf app-build.tar.gz

      - name: 🐍 Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.setup.outputs.python-version }}

      - name: 💾 Restaurar cache de pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}

      - name: 📥 Instalar dependencias
        working-directory: ${{ inputs.external_repo_path }}
        run: |
          pip install --upgrade pip
          
          if [ "${{ needs.setup.outputs.has-requirements }}" = "true" ]; then
            pip install -r local/requirements.txt
          fi
          
          pip install pytest pytest-cov pytest-html pytest-xdist coverage[toml]

      - name: 🧪 Ejecutar tests unitarios con cobertura
        working-directory: ${{ inputs.external_repo_path }}/system_info_app
        run: |
          echo "🧪 Iniciando tests unitarios..."
          
          # Crear directorio para reportes si no existe
          mkdir -p coverage-reports
          
          if [ "${{ needs.setup.outputs.has-tests }}" = "true" ]; then
            pytest -v \
              --cov=. \
              --cov-report=xml:coverage-reports/coverage.xml \
              --cov-report=html:coverage-reports/htmlcov \
              --cov-report=term-missing \
              --cov-fail-under=${{ inputs.coverage_threshold }} \
              --html=coverage-reports/pytest-report.html \
              --self-contained-html \
              -n auto \
              --maxfail=3 \
              --tb=short \
              --color=yes
            
            # Verificar que se generó el archivo
            if [ -f "coverage-reports/coverage.xml" ]; then
              echo "✅ coverage.xml generado correctamente"
              ls -lh coverage-reports/
            else
              echo "❌ ERROR: No se generó coverage.xml"
              exit 1
            fi
          else
            echo "⚠️ No se encontraron tests"
            # Crear archivo vacío para evitar fallos downstream
            mkdir -p coverage-reports
            echo '<?xml version="1.0" ?><coverage version="0.0"></coverage>' > coverage-reports/coverage.xml
          fi
        continue-on-error: false

      - name: 📊 Resumen de cobertura
        if: always()
        working-directory: ${{ inputs.external_repo_path }}/system_info_app
        run: |
          if [ -f "coverage-reports/coverage.xml" ]; then
            echo "📊 REPORTE DE COBERTURA" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            coverage report 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "Reporte no disponible"
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📤 Subir reporte de cobertura
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.run_id }}
          path: ${{ inputs.external_repo_path }}/system_info_app/coverage-reports/
          retention-days: 30
          if-no-files-found: warn

  # ═══════════════════════════════════════════════════════════
  # 🔗 JOB 2: TESTS DE INTEGRACIÓN
  # ═══════════════════════════════════════════════════════════
  test-integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: setup
    if: ${{ inputs.run_integration_tests }}

    steps:
      - name: 💾 Descargar artefacto
        uses: actions/download-artifact@v4
        with:
          name: app-source-${{ github.run_id }}

      - name: 📦 Extraer código
        run: tar -xzf app-build.tar.gz

      - name: 🐍 Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.setup.outputs.python-version }}

      - name: 💾 Restaurar cache de pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}

      - name: 📥 Instalar dependencias
        working-directory: ${{ inputs.external_repo_path }}
        run: |
          pip install --upgrade pip
          
          if [ "${{ needs.setup.outputs.has-requirements }}" = "true" ]; then
            pip install -r local/requirements.txt
          fi
          
          pip install pytest

      - name: 🔗 Ejecutar pruebas de integración
        working-directory: ${{ inputs.external_repo_path }}
        run: |
          echo "🔗 Iniciando tests de integración..."
          
          if [ -d "system_info_app" ]; then
            pytest system_info_app/ -v --tb=short --color=yes
          else
            echo "⚠️ No se encontró directorio system_info_app"
            python -c "import sys; print('✅ Validación básica OK')"
          fi

  # ═══════════════════════════════════════════════════════════
  # 🧹 JOB 3: LINTING Y ANÁLISIS DE ESTILO
  # ═══════════════════════════════════════════════════════════
  test-lint:
    name: 🧹 Lint & Style Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: setup

    steps:
      - name: 💾 Descargar artefacto
        uses: actions/download-artifact@v4
        with:
          name: app-source-${{ github.run_id }}

      - name: 📦 Extraer código
        run: tar -xzf app-build.tar.gz

      - name: 🐍 Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.setup.outputs.python-version }}

      - name: 📥 Instalar herramientas de linting
        run: pip install flake8 black pylint isort

      - name: 🔍 Flake8 - Análisis de errores sintácticos
        working-directory: ${{ inputs.external_repo_path }}/system_info_app
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "✅ Sin errores críticos"

      - name: 📏 Flake8 - Análisis completo
        working-directory: ${{ inputs.external_repo_path }}/system_info_app
        run: flake8 . --max-line-length=120 --statistics || true
        continue-on-error: true

  # ═══════════════════════════════════════════════════════════
  # 🔒 JOB 4: ANÁLISIS DE SEGURIDAD
  # ═══════════════════════════════════════════════════════════
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: setup
    if: ${{ inputs.run_security_scan }}

    steps:
      - name: 💾 Descargar artefacto
        uses: actions/download-artifact@v4
        with:
          name: app-source-${{ github.run_id }}

      - name: 📦 Extraer código
        run: tar -xzf app-build.tar.gz

      - name: 🐍 Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.setup.outputs.python-version }}

      - name: 📥 Instalar herramientas
        run: pip install bandit safety

      - name: 🔐 Bandit - Análisis de seguridad
        working-directory: ${{ inputs.external_repo_path }}/system_info_app
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -ll || echo "✅ Análisis completado"

      - name: 🛡️ Safety - Vulnerabilidades
        working-directory: ${{ inputs.external_repo_path }}
        run: |
          if [ "${{ needs.setup.outputs.has-requirements }}" = "true" ]; then
            safety check --file=local/requirements.txt || true
          fi
        continue-on-error: true

  # ═══════════════════════════════════════════════════════════
  # 📊 JOB 5: SONARCLOUD
  # ═══════════════════════════════════════════════════════════
  sonarcloud:
    name: 📊 SonarCloud Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [setup, test-unit]
    if: always() && needs.test-unit.result != 'cancelled'
    
    steps:
      - name: 💾 Descargar artefacto del código
        uses: actions/download-artifact@v4
        with:
          name: app-source-${{ github.run_id }}

      - name: 📦 Extraer código
        run: tar -xzf app-build.tar.gz

      - name: 💾 Descargar reporte de cobertura
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-${{ github.run_id }}
          path: coverage-data
        continue-on-error: true

      - name: 📋 Preparar reportes para SonarCloud
        run: |
          echo "📂 Contenido de coverage-data:"
          ls -la coverage-data/ || echo "⚠️ Directorio vacío o no existe"
          
          # Buscar coverage.xml en cualquier subdirectorio
          COVERAGE_FILE=$(find coverage-data -name "coverage.xml" -type f | head -n 1)
          
          if [ -n "$COVERAGE_FILE" ]; then
            echo "✅ Encontrado: $COVERAGE_FILE"
            
            # Copiar al directorio raíz del proyecto para SonarCloud
            cp "$COVERAGE_FILE" ${{ inputs.external_repo_path }}/system_info_app/coverage.xml
            
            echo "✅ coverage.xml copiado a: ${{ inputs.external_repo_path }}/system_info_app/"
            ls -lh ${{ inputs.external_repo_path }}/system_info_app/coverage.xml
          else
            echo "⚠️ No se encontró coverage.xml - SonarCloud continuará sin cobertura"
          fi

      - name: 🔎 Ejecutar análisis de SonarCloud
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: ${{ inputs.external_repo_path }}
          args: ${{ inputs.sonar_args }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.EXTERNAL_REPO_TOKEN }}
        continue-on-error: true

      - name: 🔗 Enlace a resultados
        run: |
          echo "✅ Análisis de SonarCloud completado" >> $GITHUB_STEP_SUMMARY
          echo "🔗 Revisa los resultados en el dashboard de SonarCloud" >> $GITHUB_STEP_SUMMARY

  # ═══════════════════════════════════════════════════════════
  # ✅ JOB 6: RESUMEN FINAL
  # ═══════════════════════════════════════════════════════════
  validation-summary:
    name: ✅ Quality Gate Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [test-unit, test-integration, test-lint, security-scan]
    if: always()

    steps:
      - name: 📊 Generar resumen ejecutivo
        run: |
          echo "# 🎯 Quality Gate - Resumen" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repositorio:** ${{ inputs.external_repo }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📋 Resultados" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Estado |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Tests Unitarios
          if [ "${{ needs.test-unit.result }}" == "success" ]; then
            echo "| 🧪 Tests Unitarios | ✅ PASSED |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🧪 Tests Unitarios | ❌ FAILED |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Tests de Integración
          if [ "${{ needs.test-integration.result }}" == "success" ]; then
            echo "| 🔗 Tests Integración | ✅ PASSED |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test-integration.result }}" == "skipped" ]; then
            echo "| 🔗 Tests Integración | ⏭️ SKIPPED |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔗 Tests Integración | ❌ FAILED |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Linting
          if [ "${{ needs.test-lint.result }}" == "success" ]; then
            echo "| 🧹 Linting | ✅ PASSED |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🧹 Linting | ⚠️ ISSUES |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Seguridad
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "| 🔒 Seguridad | ✅ PASSED |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.security-scan.result }}" == "skipped" ]; then
            echo "| 🔒 Seguridad | ⏭️ SKIPPED |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔒 Seguridad | ❌ FAILED |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Estado general
          if [ "${{ needs.test-unit.result }}" == "success" ]; then
            echo "## ✅ Quality Gate: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Quality Gate: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

      - name: ❌ Fallar si tests críticos fallaron
        if: needs.test-unit.result != 'success'
        run: |
          echo "::error::Quality Gate FAILED"
          exit 1