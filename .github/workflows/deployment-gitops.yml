########################################
# üîÑ WORKFLOW REUSABLE: Update Kubernetes & Helm Manifests
# Actualiza im√°genes Docker en manifiestos de Kubernetes y Helm
# con b√∫squeda inteligente y validaci√≥n robusta
# update-k8s-manifests.yml v2.0
########################################

name: Reusable Update K8s & Helm Manifests

on:
  workflow_call:
    inputs:
      docker_image:
        description: 'Nombre de la imagen Docker (sin usuario/tag)'
        required: true
        type: string
      dockerhub_username:
        description: 'Usuario de Docker Hub'
        required: true
        type: string
      environment:
        description: 'Entorno de deployment (pro/pre/staging/qa/devops)'
        required: true
        type: string
      image_tag:
        description: 'Tag de la imagen Docker a usar'
        required: true
        type: string
      project_name:
        description: 'Nombre del proyecto (debe coincidir con github.event.repository.name)'
        required: true
        type: string
      commit_message:
        description: 'Mensaje de commit personalizado'
        required: false
        type: string
        default: ''
      create_pr:
        description: 'Crear Pull Request en lugar de commit directo'
        required: false
        type: boolean
        default: false
      target_branch:
        description: 'Rama objetivo para el commit/PR'
        required: false
        type: string
        default: 'main'
      dry_run:
        description: 'Modo dry-run (solo mostrar cambios sin aplicar)'
        required: false
        type: boolean
        default: false
    secrets:
      GH_TOKEN:
        description: 'Token de GitHub con permisos de escritura'
        required: true
    
    outputs:
      commit_sha:
        description: 'SHA del commit generado'
        value: ${{ jobs.update-manifests.outputs.commit_sha }}
      pr_number:
        description: 'N√∫mero del PR creado (si create_pr=true)'
        value: ${{ jobs.update-manifests.outputs.pr_number }}
      files_updated:
        description: 'Lista de archivos actualizados'
        value: ${{ jobs.update-manifests.outputs.files_updated }}
      k8s_files_count:
        description: 'N√∫mero de archivos Kubernetes actualizados'
        value: ${{ jobs.update-manifests.outputs.k8s_files_count }}
      helm_files_count:
        description: 'N√∫mero de archivos Helm actualizados'
        value: ${{ jobs.update-manifests.outputs.helm_files_count }}

permissions:
  contents: write
  pull-requests: write

jobs:
  update-manifests:
    name: üîÑ Update Manifests - ${{ inputs.environment }}
    runs-on: ubuntu-latest
    
    outputs:
      commit_sha: ${{ steps.commit.outputs.commit_sha }}
      pr_number: ${{ steps.create_pr.outputs.pr_number }}
      files_updated: ${{ steps.update_files.outputs.files_updated }}
      k8s_files_count: ${{ steps.update_files.outputs.k8s_files_count }}
      helm_files_count: ${{ steps.update_files.outputs.helm_files_count }}
    
    steps:
      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      # üì• PASO 1: CHECKOUT DEL REPOSITORIO
      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      # üîß PASO 2: INSTALAR DEPENDENCIAS
      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      - name: üîß Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y yq jq
          echo "‚úÖ Dependencies installed: yq (YAML processor), jq (JSON processor)"

      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      # üîç PASO 3: VERIFICAR ESTRUCTURA DE DIRECTORIOS
      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      - name: üîç Verify directory structure
        id: verify_structure
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìÇ DIRECTORY STRUCTURE VERIFICATION"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          
          ENV="${{ inputs.environment }}"
          PROJECT="${{ inputs.project_name }}"
          
          # Rutas a verificar
          K8S_PATH="kubernetes/${ENV}/${PROJECT}"
          HELM_PATH="helm/override/${ENV}"
          
          echo "üîç Searching for manifests in:"
          echo "   üìÅ Kubernetes: ${K8S_PATH}"
          echo "   üìÅ Helm: ${HELM_PATH}"
          echo ""
          
          K8S_EXISTS=false
          HELM_EXISTS=false
          
          # Verificar Kubernetes
          if [ -d "${K8S_PATH}" ]; then
            echo "‚úÖ Kubernetes path found: ${K8S_PATH}"
            echo "üìã Contents:"
            ls -la "${K8S_PATH}"
            K8S_EXISTS=true
          else
            echo "‚ö†Ô∏è  Kubernetes path not found: ${K8S_PATH}"
          fi
          echo ""
          
          # Verificar Helm
          if [ -d "${HELM_PATH}" ]; then
            echo "‚úÖ Helm path found: ${HELM_PATH}"
            echo "üìã Contents:"
            ls -la "${HELM_PATH}"
            HELM_EXISTS=true
          else
            echo "‚ö†Ô∏è  Helm path not found: ${HELM_PATH}"
          fi
          
          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          
          # Exportar paths y existencia
          echo "k8s_path=${K8S_PATH}" >> $GITHUB_OUTPUT
          echo "helm_path=${HELM_PATH}" >> $GITHUB_OUTPUT
          echo "k8s_exists=${K8S_EXISTS}" >> $GITHUB_OUTPUT
          echo "helm_exists=${HELM_EXISTS}" >> $GITHUB_OUTPUT
          
          # Validar que al menos uno existe
          if [[ "${K8S_EXISTS}" == "false" ]] && [[ "${HELM_EXISTS}" == "false" ]]; then
            echo "‚ùå ERROR: Neither Kubernetes nor Helm paths exist!"
            echo "   Expected one of:"
            echo "   ‚Ä¢ ${K8S_PATH}"
            echo "   ‚Ä¢ ${HELM_PATH}"
            exit 1
          fi

      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      # üîÑ PASO 4: ACTUALIZAR MANIFIESTOS DE KUBERNETES
      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      - name: üîÑ Update Kubernetes manifests
        id: update_k8s
        if: steps.verify_structure.outputs.k8s_exists == 'true'
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üîÑ UPDATING KUBERNETES MANIFESTS"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          
          K8S_PATH="${{ steps.verify_structure.outputs.k8s_path }}"
          NEW_IMAGE="${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          DRY_RUN="${{ inputs.dry_run }}"
          
          echo "üê≥ New image: ${NEW_IMAGE}"
          echo "üìÅ K8s path: ${K8S_PATH}"
          echo "üîç Dry-run mode: ${DRY_RUN}"
          echo ""
          
          K8S_FILES_UPDATED=()
          K8S_CHANGED=false
          
          # Buscar todos los archivos YAML recursivamente
          find "${K8S_PATH}" -type f \( -name "*.yaml" -o -name "*.yml" \) | while read -r file; do
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "üìù Processing: ${file}"
            
            # Backup
            cp "${file}" "${file}.bak"
            
            # Buscar l√≠neas con 'image:' que contengan nuestro usuario/imagen
            OLD_IMAGE=$(grep -E "^\s*image:\s*${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:" "${file}" 2>/dev/null | head -1 | sed 's/^[[:space:]]*image:[[:space:]]*//')
            
            if [ -n "${OLD_IMAGE}" ]; then
              echo "üîç Found image line"
              echo "   Old: ${OLD_IMAGE}"
              echo "   New: ${NEW_IMAGE}"
              
              if [[ "${OLD_IMAGE}" == "${NEW_IMAGE}" ]]; then
                echo "‚ÑπÔ∏è  No change needed (same image)"
                rm "${file}.bak"
                continue
              fi
              
              if [[ "${DRY_RUN}" == "true" ]]; then
                echo "üîç [DRY-RUN] Would update image"
                rm "${file}.bak"
                continue
              fi
              
              # Actualizar usando yq para mantener formato YAML
              yq eval -i "(..|select(has(\"image\"))|select(.image == \"${OLD_IMAGE}\")).image = \"${NEW_IMAGE}\"" "${file}"
              
              # Verificar cambio
              if ! diff -q "${file}" "${file}.bak" > /dev/null 2>&1; then
                echo "‚úÖ File updated successfully"
                K8S_FILES_UPDATED+=("${file}")
                K8S_CHANGED=true
                
                # Validar YAML
                if ! yq eval "${file}" > /dev/null 2>&1; then
                  echo "‚ùå YAML validation failed! Rolling back..."
                  mv "${file}.bak" "${file}"
                  exit 1
                fi
              fi
              
              rm "${file}.bak"
            else
              echo "‚ÑπÔ∏è  No matching image found"
              rm "${file}.bak"
            fi
          done
          
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          echo "üìä Kubernetes Update Summary:"
          echo "   ‚Ä¢ Files processed: $(find "${K8S_PATH}" -type f \( -name "*.yaml" -o -name "*.yml" \) | wc -l)"
          echo "   ‚Ä¢ Files updated: ${#K8S_FILES_UPDATED[@]}"
          echo ""
          
          # Exportar resultados
          echo "k8s_changed=${K8S_CHANGED}" >> $GITHUB_OUTPUT
          echo "k8s_files_count=${#K8S_FILES_UPDATED[@]}" >> $GITHUB_OUTPUT
          printf '%s\n' "${K8S_FILES_UPDATED[@]}" > /tmp/k8s_files.txt

      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      # üéØ PASO 5: ACTUALIZAR HELM VALUES
      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      - name: üéØ Update Helm values
        id: update_helm
        if: steps.verify_structure.outputs.helm_exists == 'true'
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üéØ UPDATING HELM VALUES"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          
          HELM_PATH="${{ steps.verify_structure.outputs.helm_path }}"
          NEW_REPO="${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}"
          NEW_TAG="${{ inputs.image_tag }}"
          DRY_RUN="${{ inputs.dry_run }}"
          
          echo "üê≥ New repository: ${NEW_REPO}"
          echo "üè∑Ô∏è  New tag: ${NEW_TAG}"
          echo "üìÅ Helm path: ${HELM_PATH}"
          echo "üîç Dry-run mode: ${DRY_RUN}"
          echo ""
          
          HELM_FILES_UPDATED=()
          HELM_CHANGED=false
          
          # Buscar todos los archivos values recursivamente
          find "${HELM_PATH}" -type f \( -name "*values*.yaml" -o -name "*values*.yml" \) | while read -r file; do
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "üìù Processing: ${file}"
            
            # Backup
            cp "${file}" "${file}.bak"
            
            # Verificar si tiene estructura de imagen Helm
            HAS_IMAGE_REPO=$(yq eval '.image.repository' "${file}" 2>/dev/null)
            HAS_IMAGE_TAG=$(yq eval '.image.tag' "${file}" 2>/dev/null)
            
            if [[ "${HAS_IMAGE_REPO}" != "null" ]] && [[ "${HAS_IMAGE_TAG}" != "null" ]]; then
              OLD_REPO=$(yq eval '.image.repository' "${file}")
              OLD_TAG=$(yq eval '.image.tag' "${file}")
              
              echo "üîç Found Helm image structure:"
              echo "   Old repository: ${OLD_REPO}"
              echo "   Old tag: ${OLD_TAG}"
              echo "   New repository: ${NEW_REPO}"
              echo "   New tag: ${NEW_TAG}"
              
              NEEDS_UPDATE=false
              
              if [[ "${OLD_REPO}" != "${NEW_REPO}" ]]; then
                NEEDS_UPDATE=true
              fi
              
              if [[ "${OLD_TAG}" != "${NEW_TAG}" ]]; then
                NEEDS_UPDATE=true
              fi
              
              if [[ "${NEEDS_UPDATE}" == "false" ]]; then
                echo "‚ÑπÔ∏è  No change needed (same image)"
                rm "${file}.bak"
                continue
              fi
              
              if [[ "${DRY_RUN}" == "true" ]]; then
                echo "üîç [DRY-RUN] Would update:"
                echo "   repository: ${OLD_REPO} ‚Üí ${NEW_REPO}"
                echo "   tag: ${OLD_TAG} ‚Üí ${NEW_TAG}"
                rm "${file}.bak"
                continue
              fi
              
              # Actualizar repository y tag
              yq eval -i ".image.repository = \"${NEW_REPO}\"" "${file}"
              yq eval -i ".image.tag = \"${NEW_TAG}\"" "${file}"
              
              # Verificar cambio
              if ! diff -q "${file}" "${file}.bak" > /dev/null 2>&1; then
                echo "‚úÖ File updated successfully"
                HELM_FILES_UPDATED+=("${file}")
                HELM_CHANGED=true
                
                # Validar YAML
                if ! yq eval "${file}" > /dev/null 2>&1; then
                  echo "‚ùå YAML validation failed! Rolling back..."
                  mv "${file}.bak" "${file}"
                  exit 1
                fi
              fi
              
              rm "${file}.bak"
            else
              echo "‚ÑπÔ∏è  No Helm image structure found (skipping)"
              rm "${file}.bak"
            fi
          done
          
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo ""
          echo "üìä Helm Update Summary:"
          echo "   ‚Ä¢ Files processed: $(find "${HELM_PATH}" -type f \( -name "*values*.yaml" -o -name "*values*.yml" \) 2>/dev/null | wc -l)"
          echo "   ‚Ä¢ Files updated: ${#HELM_FILES_UPDATED[@]}"
          echo ""
          
          # Exportar resultados
          echo "helm_changed=${HELM_CHANGED}" >> $GITHUB_OUTPUT
          echo "helm_files_count=${#HELM_FILES_UPDATED[@]}" >> $GITHUB_OUTPUT
          printf '%s\n' "${HELM_FILES_UPDATED[@]}" > /tmp/helm_files.txt

      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      # üìä PASO 6: CONSOLIDAR RESULTADOS
      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      - name: üìä Consolidate results
        id: update_files
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä CONSOLIDATING UPDATE RESULTS"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          
          ALL_FILES=()
          
          # Agregar archivos K8s
          if [ -f /tmp/k8s_files.txt ]; then
            while IFS= read -r line; do
              ALL_FILES+=("${line}")
            done < /tmp/k8s_files.txt
          fi
          
          # Agregar archivos Helm
          if [ -f /tmp/helm_files.txt ]; then
            while IFS= read -r line; do
              ALL_FILES+=("${line}")
            done < /tmp/helm_files.txt
          fi
          
          K8S_CHANGED="${{ steps.update_k8s.outputs.k8s_changed }}"
          HELM_CHANGED="${{ steps.update_helm.outputs.helm_changed }}"
          K8S_COUNT="${{ steps.update_k8s.outputs.k8s_files_count }}"
          HELM_COUNT="${{ steps.update_helm.outputs.helm_files_count }}"
          
          # Determinar si hubo cambios
          CHANGED=false
          if [[ "${K8S_CHANGED}" == "true" ]] || [[ "${HELM_CHANGED}" == "true" ]]; then
            CHANGED=true
          fi
          
          echo "üìã Summary:"
          echo "   ‚Ä¢ Total files updated: ${#ALL_FILES[@]}"
          echo "   ‚Ä¢ Kubernetes files: ${K8S_COUNT:-0}"
          echo "   ‚Ä¢ Helm files: ${HELM_COUNT:-0}"
          echo "   ‚Ä¢ Changes detected: ${CHANGED}"
          echo ""
          
          if [ ${#ALL_FILES[@]} -gt 0 ]; then
            echo "üìÑ Updated files:"
            for file in "${ALL_FILES[@]}"; do
              echo "   ‚Ä¢ ${file}"
            done
          fi
          
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          
          # Exportar outputs
          echo "changed=${CHANGED}" >> $GITHUB_OUTPUT
          echo "files_updated=${ALL_FILES[*]}" >> $GITHUB_OUTPUT
          echo "k8s_files_count=${K8S_COUNT:-0}" >> $GITHUB_OUTPUT
          echo "helm_files_count=${HELM_COUNT:-0}" >> $GITHUB_OUTPUT

      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      # üìä PASO 7: MOSTRAR CAMBIOS
      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      - name: üìä Show changes
        if: steps.update_files.outputs.changed == 'true' && inputs.dry_run == false
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä GIT DIFF - CHANGES PREVIEW"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          
          if [[ "${{ steps.verify_structure.outputs.k8s_exists }}" == "true" ]]; then
            echo ""
            echo "üî∑ Kubernetes Changes:"
            git diff ${{ steps.verify_structure.outputs.k8s_path }} || echo "No changes"
          fi
          
          if [[ "${{ steps.verify_structure.outputs.helm_exists }}" == "true" ]]; then
            echo ""
            echo "üéØ Helm Changes:"
            git diff ${{ steps.verify_structure.outputs.helm_path }} || echo "No changes"
          fi
          
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      # üîß PASO 8: CONFIGURAR GIT
      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      - name: üîß Configure Git
        if: steps.update_files.outputs.changed == 'true' && inputs.dry_run == false
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      # üíæ PASO 9A: COMMIT DIRECTO
      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      - name: üíæ Commit changes
        id: commit
        if: steps.update_files.outputs.changed == 'true' && inputs.create_pr == false && inputs.dry_run == false
        run: |
          if [ -n "${{ inputs.commit_message }}" ]; then
            COMMIT_MSG="${{ inputs.commit_message }}"
          else
            COMMIT_MSG="üîÑ Update manifests - ${{ inputs.environment }} - ${{ inputs.image_tag }}"
          fi
          
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üíæ COMMITTING CHANGES"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìù Commit message: ${COMMIT_MSG}"
          echo "üåø Target branch: ${{ inputs.target_branch }}"
          echo ""
          
          # Agregar solo los archivos modificados
          if [[ "${{ steps.verify_structure.outputs.k8s_exists }}" == "true" ]]; then
            git add ${{ steps.verify_structure.outputs.k8s_path }}
          fi
          
          if [[ "${{ steps.verify_structure.outputs.helm_exists }}" == "true" ]]; then
            git add ${{ steps.verify_structure.outputs.helm_path }}
          fi
          
          git commit -m "${COMMIT_MSG}" \
            -m "Environment: ${{ inputs.environment }}" \
            -m "Project: ${{ inputs.project_name }}" \
            -m "Image: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}" \
            -m "Kubernetes files updated: ${{ steps.update_files.outputs.k8s_files_count }}" \
            -m "Helm files updated: ${{ steps.update_files.outputs.helm_files_count }}" \
            -m "Triggered by: ${{ github.actor }}" \
            -m "Workflow: ${{ github.workflow }}" \
            -m "Run ID: ${{ github.run_id }}"
          
          git push origin HEAD:${{ inputs.target_branch }}
          
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          
          echo ""
          echo "‚úÖ Changes committed and pushed successfully"
          echo "üîó Commit SHA: ${COMMIT_SHA}"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      # üîÄ PASO 9B: CREAR PULL REQUEST
      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      - name: üîÄ Create Pull Request
        id: create_pr
        if: steps.update_files.outputs.changed == 'true' && inputs.create_pr == true && inputs.dry_run == false
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_TOKEN }}
          commit-message: |
            üîÑ Update K8s & Helm manifests - ${{ inputs.environment }} - ${{ inputs.image_tag }}
            
            Environment: ${{ inputs.environment }}
            Project: ${{ inputs.project_name }}
            Image: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}
            K8s files: ${{ steps.update_files.outputs.k8s_files_count }}
            Helm files: ${{ steps.update_files.outputs.helm_files_count }}
          branch: manifests-update-${{ inputs.environment }}-${{ github.run_id }}
          delete-branch: true
          base: ${{ inputs.target_branch }}
          title: "üîÑ Update Manifests - ${{ inputs.environment }} - ${{ inputs.image_tag }}"
          body: |
            ## üîÑ Kubernetes & Helm Manifests Update
            
            This PR updates both Kubernetes and Helm manifests with the new Docker image.
            
            ### üìã Details
            - **Environment**: `${{ inputs.environment }}`
            - **Project**: `${{ inputs.project_name }}`
            - **New Image**: `${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}`
            - **K8s Files Updated**: ${{ steps.update_files.outputs.k8s_files_count }}
            - **Helm Files Updated**: ${{ steps.update_files.outputs.helm_files_count }}
            - **Triggered by**: @${{ github.actor }}
            - **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### üìÇ Paths Updated
            ${{ steps.verify_structure.outputs.k8s_exists == 'true' && format('- üî∑ Kubernetes: `{0}`', steps.verify_structure.outputs.k8s_path) || '' }}
            ${{ steps.verify_structure.outputs.helm_exists == 'true' && format('- üéØ Helm: `{0}`', steps.verify_structure.outputs.helm_path) || '' }}
            
            ### ü§ñ Automated Changes
            This PR was automatically generated by the CI/CD pipeline after a successful build.
            All manifests have been validated for YAML syntax.
            
            ---
            
            Please review and merge to apply the changes to the `${{ inputs.target_branch }}` branch.
          labels: |
            automated
            manifests-update
            ${{ inputs.environment }}

      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      # üìä PASO 10: RESUMEN FINAL
      # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      - name: üìä Summary Report
        if: always()
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä MANIFESTS UPDATE SUMMARY"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üåç Environment: ${{ inputs.environment }}"
          echo "üì¶ Project: ${{ inputs.project_name }}"
          echo "üê≥ New Image: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          echo "üåø Target Branch: ${{ inputs.target_branch }}"
          echo "üîç Dry-run Mode: ${{ inputs.dry_run }}"
          echo ""
          
          if [ "${{ steps.update_files.outputs.changed }}" = "true" ]; then
            echo "‚úÖ Status: Changes detected"
            echo ""
            echo "üìä Files Updated:"
            echo "   ‚Ä¢ Kubernetes: $