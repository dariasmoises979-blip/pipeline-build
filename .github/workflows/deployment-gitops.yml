########################################
# 🚀 WORKFLOW REUSABLE: GitOps Deployment
# Orchestrador principal para despliegues GitOps
# Actualiza manifiestos de Kubernetes y Helm
# deployment-gitops.yml v2.0
########################################

name: Reusable GitOps Deployment

on:
  workflow_call:
    inputs:
      project_name:
        description: 'Nombre del proyecto (coincide con github.event.repository.name)'
        required: true
        type: string
      docker_image:
        description: 'Nombre de la imagen Docker (sin usuario/tag)'
        required: true
        type: string
      dockerhub_username:
        description: 'Usuario de Docker Hub'
        required: true
        type: string
      environment:
        description: 'Entorno de deployment (pro/pre/staging/qa/devops)'
        required: true
        type: string
      image_tag:
        description: 'Tag de la imagen Docker a usar'
        required: true
        type: string
      # DEPRECATED pero mantenidos para compatibilidad
      manifests_path:
        description: '[DEPRECATED] Se calcula automáticamente'
        required: false
        type: string
        default: ''
      manifest_files:
        description: '[DEPRECATED] Se procesan todos los YAML automáticamente'
        required: false
        type: string
        default: ''
      create_pr:
        description: 'Crear Pull Request en lugar de commit directo'
        required: false
        type: boolean
        default: false
      target_branch:
        description: 'Rama objetivo para el commit/PR'
        required: false
        type: string
        default: 'main'
      dry_run:
        description: 'Modo dry-run (solo preview sin aplicar cambios)'
        required: false
        type: boolean
        default: false
    secrets:
      GH_TOKEN:
        description: 'Token de GitHub con permisos de escritura'
        required: true
    
    outputs:
      commit_sha:
        description: 'SHA del commit generado'
        value: ${{ jobs.gitops-deployment.outputs.commit_sha }}
      pr_number:
        description: 'Número del PR creado (si create_pr=true)'
        value: ${{ jobs.gitops-deployment.outputs.pr_number }}
      files_updated:
        description: 'Lista de archivos actualizados'
        value: ${{ jobs.gitops-deployment.outputs.files_updated }}
      k8s_files_count:
        description: 'Número de archivos Kubernetes actualizados'
        value: ${{ jobs.gitops-deployment.outputs.k8s_files_count }}
      helm_files_count:
        description: 'Número de archivos Helm actualizados'
        value: ${{ jobs.gitops-deployment.outputs.helm_files_count }}
      deployment_status:
        description: 'Estado del deployment (success/failed/skipped)'
        value: ${{ jobs.gitops-deployment.outputs.deployment_status }}

permissions:
  contents: write
  pull-requests: write

jobs:
  gitops-deployment:
    name: 🚀 GitOps Deploy - ${{ inputs.environment }}
    runs-on: ubuntu-latest
    
    outputs:
      commit_sha: ${{ steps.deploy.outputs.commit_sha }}
      pr_number: ${{ steps.deploy.outputs.pr_number }}
      files_updated: ${{ steps.deploy.outputs.files_updated }}
      k8s_files_count: ${{ steps.deploy.outputs.k8s_files_count }}
      helm_files_count: ${{ steps.deploy.outputs.helm_files_count }}
      deployment_status: ${{ steps.status.outputs.status }}
    
    steps:
      # ═══════════════════════════════════════════════════════════
      # 📊 PASO 1: INFORMACIÓN DEL DEPLOYMENT
      # ═══════════════════════════════════════════════════════════
      - name: 📊 Deployment Information
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 GITOPS DEPLOYMENT ORCHESTRATION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Project: ${{ inputs.project_name }}"
          echo "🌍 Environment: ${{ inputs.environment }}"
          echo "🐳 Image: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          echo "🌿 Target Branch: ${{ inputs.target_branch }}"
          echo "🔀 Create PR: ${{ inputs.create_pr }}"
          echo "🔍 Dry-run: ${{ inputs.dry_run }}"
          echo ""
          echo "📂 Expected paths:"
          echo "   • Kubernetes: kubernetes/${{ inputs.environment }}/${{ inputs.project_name }}/"
          echo "   • Helm: helm/override/${{ inputs.environment }}/"
          echo ""
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "🕐 Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ═══════════════════════════════════════════════════════════
      # 📥 PASO 2: CHECKOUT DEL REPOSITORIO ACTUAL
      # ═══════════════════════════════════════════════════════════
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0
          ref: ${{ inputs.target_branch }}

      # ═══════════════════════════════════════════════════════════
      # 🔧 PASO 3: INSTALAR DEPENDENCIAS
      # ═══════════════════════════════════════════════════════════
      - name: 🔧 Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y yq jq
          echo "✅ yq and jq installed"

      # ═══════════════════════════════════════════════════════════
      # 🔍 PASO 4: VERIFICAR ESTRUCTURA
      # ═══════════════════════════════════════════════════════════
      - name: 🔍 Verify directory structure
        id: verify
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📂 DIRECTORY STRUCTURE VERIFICATION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          K8S_PATH="kubernetes/${{ inputs.environment }}/${{ inputs.project_name }}"
          HELM_PATH="helm/override/${{ inputs.environment }}"
          
          K8S_EXISTS=false
          HELM_EXISTS=false
          
          if [ -d "${K8S_PATH}" ]; then
            echo "✅ Kubernetes: ${K8S_PATH}"
            ls -la "${K8S_PATH}"
            K8S_EXISTS=true
          else
            echo "⚠️  Kubernetes path not found: ${K8S_PATH}"
          fi
          
          echo ""
          
          if [ -d "${HELM_PATH}" ]; then
            echo "✅ Helm: ${HELM_PATH}"
            ls -la "${HELM_PATH}"
            HELM_EXISTS=true
          else
            echo "⚠️  Helm path not found: ${HELM_PATH}"
          fi
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          echo "k8s_path=${K8S_PATH}" >> $GITHUB_OUTPUT
          echo "helm_path=${HELM_PATH}" >> $GITHUB_OUTPUT
          echo "k8s_exists=${K8S_EXISTS}" >> $GITHUB_OUTPUT
          echo "helm_exists=${HELM_EXISTS}" >> $GITHUB_OUTPUT
          
          if [[ "${K8S_EXISTS}" == "false" ]] && [[ "${HELM_EXISTS}" == "false" ]]; then
            echo "❌ ERROR: Neither path exists!"
            exit 1
          fi

      # ═══════════════════════════════════════════════════════════
      # 🔄 PASO 5: ACTUALIZAR KUBERNETES
      # ═══════════════════════════════════════════════════════════
      - name: 🔄 Update Kubernetes manifests
        id: update_k8s
        if: steps.verify.outputs.k8s_exists == 'true'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔄 UPDATING KUBERNETES MANIFESTS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          K8S_PATH="${{ steps.verify.outputs.k8s_path }}"
          NEW_IMAGE="${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          DRY_RUN="${{ inputs.dry_run }}"
          
          K8S_COUNT=0
          
          find "${K8S_PATH}" -type f \( -name "*.yaml" -o -name "*.yml" \) | while read -r file; do
            echo "📝 ${file}"
            
            OLD_IMAGE=$(grep -E "^\s*image:\s*${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:" "${file}" 2>/dev/null | head -1 | sed 's/^[[:space:]]*image:[[:space:]]*//')
            
            if [ -n "${OLD_IMAGE}" ] && [[ "${OLD_IMAGE}" != "${NEW_IMAGE}" ]]; then
              echo "   Old: ${OLD_IMAGE}"
              echo "   New: ${NEW_IMAGE}"
              
              if [[ "${DRY_RUN}" != "true" ]]; then
                cp "${file}" "${file}.bak"
                yq eval -i "(..|select(has(\"image\"))|select(.image == \"${OLD_IMAGE}\")).image = \"${NEW_IMAGE}\"" "${file}"
                
                if yq eval "${file}" > /dev/null 2>&1; then
                  echo "   ✅ Updated"
                  rm "${file}.bak"
                  K8S_COUNT=$((K8S_COUNT + 1))
                else
                  echo "   ❌ YAML invalid, rolling back"
                  mv "${file}.bak" "${file}"
                fi
              else
                echo "   🔍 [DRY-RUN] Would update"
              fi
            fi
          done
          
          echo "k8s_count=${K8S_COUNT}" >> $GITHUB_OUTPUT
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ═══════════════════════════════════════════════════════════
      # 🎯 PASO 6: ACTUALIZAR HELM
      # ═══════════════════════════════════════════════════════════
      - name: 🎯 Update Helm values
        id: update_helm
        if: steps.verify.outputs.helm_exists == 'true'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎯 UPDATING HELM VALUES"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          HELM_PATH="${{ steps.verify.outputs.helm_path }}"
          NEW_REPO="${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}"
          NEW_TAG="${{ inputs.image_tag }}"
          DRY_RUN="${{ inputs.dry_run }}"
          
          HELM_COUNT=0
          
          find "${HELM_PATH}" -type f \( -name "*values*.yaml" -o -name "*values*.yml" \) | while read -r file; do
            echo "📝 ${file}"
            
            HAS_IMAGE=$(yq eval '.image.repository' "${file}" 2>/dev/null)
            
            if [[ "${HAS_IMAGE}" != "null" ]]; then
              OLD_REPO=$(yq eval '.image.repository' "${file}")
              OLD_TAG=$(yq eval '.image.tag' "${file}")
              
              if [[ "${OLD_REPO}" != "${NEW_REPO}" ]] || [[ "${OLD_TAG}" != "${NEW_TAG}" ]]; then
                echo "   Old: ${OLD_REPO}:${OLD_TAG}"
                echo "   New: ${NEW_REPO}:${NEW_TAG}"
                
                if [[ "${DRY_RUN}" != "true" ]]; then
                  cp "${file}" "${file}.bak"
                  yq eval -i ".image.repository = \"${NEW_REPO}\"" "${file}"
                  yq eval -i ".image.tag = \"${NEW_TAG}\"" "${file}"
                  
                  if yq eval "${file}" > /dev/null 2>&1; then
                    echo "   ✅ Updated"
                    rm "${file}.bak"
                    HELM_COUNT=$((HELM_COUNT + 1))
                  else
                    echo "   ❌ YAML invalid, rolling back"
                    mv "${file}.bak" "${file}"
                  fi
                else
                  echo "   🔍 [DRY-RUN] Would update"
                fi
              fi
            fi
          done
          
          echo "helm_count=${HELM_COUNT}" >> $GITHUB_OUTPUT
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ═══════════════════════════════════════════════════════════
      # 📊 PASO 7: CONSOLIDAR RESULTADOS
      # ═══════════════════════════════════════════════════════════
      - name: 📊 Consolidate results
        id: consolidate
        run: |
          K8S_COUNT="${{ steps.update_k8s.outputs.k8s_count || '0' }}"
          HELM_COUNT="${{ steps.update_helm.outputs.helm_count || '0' }}"
          TOTAL=$((K8S_COUNT + HELM_COUNT))
          
          echo "k8s_files_count=${K8S_COUNT}" >> $GITHUB_OUTPUT
          echo "helm_files_count=${HELM_COUNT}" >> $GITHUB_OUTPUT
          echo "total_files=${TOTAL}" >> $GITHUB_OUTPUT
          
          if [ ${TOTAL} -gt 0 ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
          
          echo "📊 K8s: ${K8S_COUNT}, Helm: ${HELM_COUNT}, Total: ${TOTAL}"

      # ═══════════════════════════════════════════════════════════
      # 💾 PASO 8: COMMIT O PR
      # ═══════════════════════════════════════════════════════════
      - name: 🔧 Configure Git
        if: steps.consolidate.outputs.changed == 'true' && inputs.dry_run == false
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 💾 Commit changes
        id: commit
        if: steps.consolidate.outputs.changed == 'true' && inputs.create_pr == false && inputs.dry_run == false
        run: |
          git add .
          git commit -m "🔄 Update manifests - ${{ inputs.environment }} - ${{ inputs.image_tag }}" \
            -m "Project: ${{ inputs.project_name }}" \
            -m "Image: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}" \
            -m "K8s files: ${{ steps.consolidate.outputs.k8s_files_count }}" \
            -m "Helm files: ${{ steps.consolidate.outputs.helm_files_count }}"
          
          git push origin HEAD:${{ inputs.target_branch }}
          
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "✅ Committed and pushed"

      - name: 🔀 Create Pull Request
        id: create_pr
        if: steps.consolidate.outputs.changed == 'true' && inputs.create_pr == true && inputs.dry_run == false
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_TOKEN }}
          branch: manifests-update-${{ inputs.environment }}-${{ github.run_id }}
          delete-branch: true
          base: ${{ inputs.target_branch }}
          title: "🔄 Update Manifests - ${{ inputs.environment }} - ${{ inputs.image_tag }}"
          body: |
            ## 🔄 Kubernetes & Helm Manifests Update
            
            - **Environment**: `${{ inputs.environment }}`
            - **Project**: `${{ inputs.project_name }}`
            - **Image**: `${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}`
            - **K8s Files**: ${{ steps.consolidate.outputs.k8s_files_count }}
            - **Helm Files**: ${{ steps.consolidate.outputs.helm_files_count }}
          labels: |
            automated
            ${{ inputs.environment }}

      # ═══════════════════════════════════════════════════════════
      # ✅ PASO 9: ESTADO FINAL
      # ═══════════════════════════════════════════════════════════
      - name: ✅ Set deployment status
        id: status
        run: |
          TOTAL="${{ steps.consolidate.outputs.total_files }}"
          
          if [ "${TOTAL}" -eq 0 ]; then
            echo "status=skipped" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "status=dry-run" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      # ═══════════════════════════════════════════════════════════
      # 📊 PASO 10: OUTPUTS PARA EL JOB
      # ═══════════════════════════════════════════════════════════
      - name: 📊 Export deployment outputs
        id: deploy
        run: |
          echo "commit_sha=${{ steps.commit.outputs.commit_sha }}" >> $GITHUB_OUTPUT
          echo "pr_number=${{ steps.create_pr.outputs.pull-request-number }}" >> $GITHUB_OUTPUT
          echo "k8s_files_count=${{ steps.consolidate.outputs.k8s_files_count }}" >> $GITHUB_OUTPUT
          echo "helm_files_count=${{ steps.consolidate.outputs.helm_files_count }}" >> $GITHUB_OUTPUT
          echo "files_updated=kubernetes+helm" >> $GITHUB_OUTPUT

      - name: 📊 Summary
        if: always()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 DEPLOYMENT SUMMARY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌍 Environment: ${{ inputs.environment }}"
          echo "📦 Project: ${{ inputs.project_name }}"
          echo "🐳 Image: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          echo ""
          echo "📊 Files Updated:"
          echo "   • Kubernetes: ${{ steps.consolidate.outputs.k8s_files_count }}"
          echo "   • Helm: ${{ steps.consolidate.outputs.helm_files_count }}"
          echo "   • Total: ${{ steps.consolidate.outputs.total_files }}"
          echo ""
          echo "📌 Status: ${{ steps.status.outputs.status }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"