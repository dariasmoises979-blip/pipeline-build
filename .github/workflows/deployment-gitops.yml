########################################
# 🚀 WORKFLOW REUSABLE: GitOps Deployment
# Actualiza manifiestos YAML en kubernetes/{environment}
# Compatible con estructura: kubernetes/pre, kubernetes/staging, kubernetes/pro
#deployment-gitops.yml
########################################

name: Reusable GitOps Deployment

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Target environment (pre, staging, pro)'
      image_tag:
        required: true
        type: string
        description: 'Docker image tag to deploy'
      dockerhub_username:
        required: true
        type: string
        description: 'Usuario de Docker Hub'
      docker_image:
        required: true
        type: string
        description: 'Nombre de la imagen Docker'
      manifests_path:
        required: false
        type: string
        default: 'kubernetes'
        description: 'Ruta base de manifiestos (default: kubernetes)'
      manifest_file_pattern:
        required: false
        type: string
        default: '*.yaml'
        description: 'Patrón de archivos a actualizar'
      git_user_name:
        required: false
        type: string
        default: 'github-actions[bot]'
      git_user_email:
        required: false
        type: string
        default: 'github-actions[bot]@users.noreply.github.com'
      commit_message_prefix:
        required: false
        type: string
        default: '[GitOps]'
      requires_approval:
        required: false
        type: boolean
        default: false

jobs:
  # ═══════════════════════════════════════════════════════════
  # 📋 JOB 1: INFORMACIÓN DEL DEPLOYMENT
  # ═══════════════════════════════════════════════════════════
  show-deployment-info:
    name: 📦 Deployment Info
    runs-on: ubuntu-latest
    steps:
      - name: Display Information
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 GITOPS DEPLOYMENT"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌍 Environment: ${{ inputs.environment }}"
          echo "🏷️  Image Tag: ${{ inputs.image_tag }}"
          echo "📦 Docker Image: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}"
          echo "📂 Manifests Path: ${{ inputs.manifests_path }}/${{ inputs.environment }}"
          echo "📄 File Pattern: ${{ inputs.manifest_file_pattern }}"
          echo "🔐 Requires Approval: ${{ inputs.requires_approval }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  # ═══════════════════════════════════════════════════════════
  # 🔄 JOB 2: ACTUALIZAR MANIFIESTOS
  # ═══════════════════════════════════════════════════════════
  update-manifests:
    name: 🔄 Update Manifests
    needs: show-deployment-info
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Show Repository Structure
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📂 REPOSITORY STRUCTURE"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📍 Current directory: $(pwd)"
          echo ""
          echo "📁 Root structure:"
          ls -la
          echo ""
          if [ -d "${{ inputs.manifests_path }}" ]; then
            echo "✅ Manifests directory found: ${{ inputs.manifests_path }}"
            echo ""
            echo "📋 Environments available:"
            ls -la ${{ inputs.manifests_path }}
          else
            echo "❌ Manifests directory not found: ${{ inputs.manifests_path }}"
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Verify Environment Directory
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔍 VERIFYING ENVIRONMENT DIRECTORY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          TARGET_DIR="${{ inputs.manifests_path }}/${{ inputs.environment }}"
          
          if [ ! -d "${TARGET_DIR}" ]; then
            echo "❌ ERROR: Directory ${TARGET_DIR} not found!"
            echo ""
            echo "📋 Available structure:"
            ls -la ${{ inputs.manifests_path }} 2>/dev/null || echo "Base manifests directory not found"
            echo ""
            echo "💡 Expected: ${TARGET_DIR}"
            echo ""
            echo "🔧 Available environments:"
            find ${{ inputs.manifests_path }} -maxdepth 1 -type d 2>/dev/null || echo "No subdirectories found"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            exit 1
          fi
          
          echo "✅ Environment directory found: ${TARGET_DIR}"
          echo ""
          echo "📋 Files in directory:"
          ls -la "${TARGET_DIR}"
          echo ""
          echo "📄 YAML files:"
          find "${TARGET_DIR}" -name "${{ inputs.manifest_file_pattern }}" -type f || echo "No YAML files found"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Update Image Tags
        id: update
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔄 UPDATING IMAGE TAGS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          MANIFESTS_DIR="${{ inputs.manifests_path }}/${{ inputs.environment }}"
          NEW_IMAGE="${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          IMAGE_NAME="${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}"
          UPDATED_FILES=""
          CHANGES_MADE=false
          
          echo "🎯 Target directory: ${MANIFESTS_DIR}"
          echo "🏷️  New image: ${NEW_IMAGE}"
          echo "🔍 Looking for image: ${IMAGE_NAME}"
          echo "📄 File pattern: ${{ inputs.manifest_file_pattern }}"
          echo ""
          
          # Buscar recursivamente todos los archivos YAML en el directorio del ambiente
          while IFS= read -r -d '' file; do
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "📄 Processing: ${file#${MANIFESTS_DIR}/}"
            
            # Verificar si contiene la imagen
            if grep -q "${IMAGE_NAME}" "$file"; then
              echo "   ✅ Image reference found"
              echo "   📋 Current image:"
              grep "${IMAGE_NAME}" "$file" | sed 's/^/      /'
              
              # Actualizar el tag
              # Patrón 1: image: user/image:tag
              sed -i.bak "s|image: ${IMAGE_NAME}:[^[:space:]\"']*|image: ${NEW_IMAGE}|g" "$file"
              # Patrón 2: image: "user/image:tag"
              sed -i.bak "s|image: \"${IMAGE_NAME}:[^\"]*\"|image: \"${NEW_IMAGE}\"|g" "$file"
              # Patrón 3: image: 'user/image:tag'
              sed -i.bak "s|image: '${IMAGE_NAME}:[^']*'|image: '${NEW_IMAGE}'|g" "$file"
              # Patrón 4: valor directo sin "image:" (para values.yaml)
              sed -i.bak "s|${IMAGE_NAME}:[^[:space:]\"']*|${NEW_IMAGE}|g" "$file"
              
              # Verificar si hubo cambios
              if ! cmp -s "$file" "$file.bak"; then
                echo "   ✅ Updated successfully"
                echo "   📋 New image:"
                grep "${IMAGE_NAME}" "$file" | sed 's/^/      /'
                UPDATED_FILES="${UPDATED_FILES}$(basename $file) "
                CHANGES_MADE=true
                rm "$file.bak"
              else
                echo "   ℹ️  Already up to date"
                rm "$file.bak"
              fi
            else
              echo "   ⚠️  No image reference found"
            fi
          done < <(find "${MANIFESTS_DIR}" -name "${{ inputs.manifest_file_pattern }}" -type f -print0)
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          if [ "$CHANGES_MADE" = true ]; then
            echo "✅ UPDATES COMPLETED"
            echo "📝 Updated files: ${UPDATED_FILES}"
            echo "changes_made=true" >> $GITHUB_OUTPUT
            echo "updated_files=${UPDATED_FILES}" >> $GITHUB_OUTPUT
          else
            echo "ℹ️  NO CHANGES NEEDED"
            echo "   All manifests already using: ${{ inputs.image_tag }}"
            echo "changes_made=false" >> $GITHUB_OUTPUT
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Show Git Diff
        if: steps.update.outputs.changes_made == 'true'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 GIT DIFF - CHANGES TO BE COMMITTED"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          git diff ${{ inputs.manifests_path }}/${{ inputs.environment }}
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Configure Git
        if: steps.update.outputs.changes_made == 'true'
        run: |
          git config --global user.name "${{ inputs.git_user_name }}"
          git config --global user.email "${{ inputs.git_user_email }}"

      - name: Commit and Push Changes
        if: steps.update.outputs.changes_made == 'true'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📤 COMMITTING AND PUSHING"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Add changes
          git add ${{ inputs.manifests_path }}/${{ inputs.environment }}
          
          # Create detailed commit message
          COMMIT_MSG="${{ inputs.commit_message_prefix }} Deploy ${{ inputs.environment }}: ${{ inputs.image_tag }}

          Environment: ${{ inputs.environment }}
          Image: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}
          Tag: ${{ inputs.image_tag }}
          Files: ${{ steps.update.outputs.updated_files }}
          
          Triggered by: ${{ github.actor }}
          Workflow: ${{ github.workflow }}
          Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          git commit -m "${COMMIT_MSG}"
          
          echo "✅ Changes committed"
          echo ""
          echo "📋 Commit details:"
          git log -1 --stat
          echo ""
          
          # Push
          echo "⬆️  Pushing to origin..."
          git push origin ${{ github.ref_name }}
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ PUSHED SUCCESSFULLY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔄 ArgoCD will detect and sync changes"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Deployment Summary
        if: always()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 DEPLOYMENT SUMMARY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌍 Environment: ${{ inputs.environment }}"
          echo "📦 Image: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          echo "📂 Path: ${{ inputs.manifests_path }}/${{ inputs.environment }}"
          echo "📝 Changes: ${{ steps.update.outputs.changes_made }}"
          if [ "${{ steps.update.outputs.changes_made }}" = "true" ]; then
            echo "📄 Files: ${{ steps.update.outputs.updated_files }}"
          fi
          echo "👤 By: ${{ github.actor }}"
          echo "🕐 Time: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "🔗 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  # ═══════════════════════════════════════════════════════════
  # 📊 JOB 3: NOTIFICACIÓN FINAL
  # ═══════════════════════════════════════════════════════════
  notify:
    name: 📊 Notification
    needs: [show-deployment-info, update-manifests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Final Status
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎯 GITOPS DEPLOYMENT COMPLETED"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌍 Environment: ${{ inputs.environment }}"
          echo "📦 Image: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          echo "📂 Location: ${{ inputs.manifests_path }}/${{ inputs.environment }}"
          echo "✅ Status: ${{ needs.update-manifests.result }}"
          echo ""
          echo "🔄 Next: ArgoCD will sync the changes"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"