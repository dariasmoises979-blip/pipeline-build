########################################
# 🔄 WORKFLOW REUSABLE: Update Kubernetes Manifests
# Actualiza imágenes Docker en manifiestos de Kubernetes
# y sube los cambios al repositorio
# update-k8s-manifests.yml
########################################

name: Reusable Update K8s Manifests

# 🔧 Definir como workflow reusable con inputs configurables
on:
  workflow_call:
    inputs:
      docker_image:
        description: 'Nombre de la imagen Docker (sin usuario/tag)'
        required: true
        type: string
      dockerhub_username:
        description: 'Usuario de Docker Hub'
        required: true
        type: string
      environment:
        description: 'Entorno de deployment (pro/pre/staging)'
        required: true
        type: string
      image_tag:
        description: 'Tag de la imagen Docker a usar'
        required: true
        type: string
      manifests_path:
        description: 'Ruta a los manifiestos de Kubernetes (relativo al repo)'
        required: false
        type: string
        default: 'k8s/manifests'
      manifest_files:
        description: 'Archivos a actualizar (separados por coma, ej: deployment.yaml,statefulset.yaml)'
        required: false
        type: string
        default: 'deployment.yaml'
      commit_message:
        description: 'Mensaje de commit personalizado'
        required: false
        type: string
        default: ''
      create_pr:
        description: 'Crear Pull Request en lugar de commit directo'
        required: false
        type: boolean
        default: false
      target_branch:
        description: 'Rama objetivo para el commit/PR'
        required: false
        type: string
        default: 'main'
    secrets:
      GH_TOKEN:
        description: 'Token de GitHub con permisos de escritura'
        required: true
    
    # ═══════════════════════════════════════════════════════════
    # 🆕 OUTPUTS: INFORMACIÓN DEL UPDATE
    # ═══════════════════════════════════════════════════════════
    outputs:
      commit_sha:
        description: 'SHA del commit generado'
        value: ${{ jobs.update-manifests.outputs.commit_sha }}
      pr_number:
        description: 'Número del PR creado (si create_pr=true)'
        value: ${{ jobs.update-manifests.outputs.pr_number }}
      files_updated:
        description: 'Lista de archivos actualizados'
        value: ${{ jobs.update-manifests.outputs.files_updated }}

permissions:
  contents: write
  pull-requests: write

jobs:
  # ═══════════════════════════════════════════════════════════
  # 🔄 JOB: UPDATE KUBERNETES MANIFESTS
  # ═══════════════════════════════════════════════════════════
  update-manifests:
    name: 🔄 Update K8s Manifests - ${{ inputs.environment }}
    runs-on: ubuntu-latest
    
    outputs:
      commit_sha: ${{ steps.commit.outputs.commit_sha }}
      pr_number: ${{ steps.create_pr.outputs.pr_number }}
      files_updated: ${{ steps.update_files.outputs.files_updated }}
    
    steps:
      # ═══════════════════════════════════════════════════════════
      # 📥 PASO 1: CHECKOUT DEL REPOSITORIO
      # ═══════════════════════════════════════════════════════════
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      # ═══════════════════════════════════════════════════════════
      # 🔍 PASO 2: VERIFICAR ESTRUCTURA DE ARCHIVOS
      # ═══════════════════════════════════════════════════════════
      - name: 🔍 Verify manifests structure
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📂 KUBERNETES MANIFESTS VERIFICATION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📁 Manifests path: ${{ inputs.manifests_path }}"
          echo ""
          
          if [ -d "${{ inputs.manifests_path }}" ]; then
            echo "✅ Manifests directory exists"
            echo ""
            echo "📋 Directory contents:"
            ls -la ${{ inputs.manifests_path }}
          else
            echo "❌ Manifests directory not found"
            echo "Creating directory..."
            mkdir -p ${{ inputs.manifests_path }}
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ═══════════════════════════════════════════════════════════
      # 🔄 PASO 3: ACTUALIZAR IMÁGENES EN MANIFIESTOS
      # ═══════════════════════════════════════════════════════════
      - name: 🔄 Update image tags in manifests
        id: update_files
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔄 UPDATING KUBERNETES MANIFESTS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Variables
          NEW_IMAGE="${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          MANIFESTS_PATH="${{ inputs.manifests_path }}"
          FILES="${{ inputs.manifest_files }}"
          
          echo "🐳 New image: ${NEW_IMAGE}"
          echo "📁 Manifests path: ${MANIFESTS_PATH}"
          echo "📄 Files to update: ${FILES}"
          echo ""
          
          # Convertir la lista de archivos separada por comas en array
          IFS=',' read -ra FILE_ARRAY <<< "${FILES}"
          
          UPDATED_FILES=()
          CHANGED=false
          
          for file in "${FILE_ARRAY[@]}"; do
            file=$(echo "${file}" | xargs)  # Trim whitespace
            FULL_PATH="${MANIFESTS_PATH}/${file}"
            
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "📝 Processing: ${file}"
            
            if [ ! -f "${FULL_PATH}" ]; then
              echo "⚠️  File not found: ${FULL_PATH}"
              continue
            fi
            
            # Hacer backup
            cp "${FULL_PATH}" "${FULL_PATH}.bak"
            
            # Buscar y reemplazar la imagen
            # Patrón: busca líneas con "image:" que contengan el nombre de la imagen
            OLD_IMAGE=$(grep -E "^\s*image:\s*${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:" "${FULL_PATH}" | head -1 | sed 's/^[[:space:]]*image:[[:space:]]*//')
            
            if [ -n "${OLD_IMAGE}" ]; then
              echo "🔍 Old image: ${OLD_IMAGE}"
              echo "🆕 New image: ${NEW_IMAGE}"
              
              # Reemplazar la imagen
              sed -i "s|image: ${OLD_IMAGE}|image: ${NEW_IMAGE}|g" "${FULL_PATH}"
              
              # Verificar si hubo cambios
              if ! diff -q "${FULL_PATH}" "${FULL_PATH}.bak" > /dev/null; then
                echo "✅ File updated successfully"
                UPDATED_FILES+=("${file}")
                CHANGED=true
              else
                echo "ℹ️  No changes needed (same image)"
              fi
              
              rm "${FULL_PATH}.bak"
            else
              echo "⚠️  No image line found matching pattern"
              rm "${FULL_PATH}.bak"
            fi
          done
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "📊 Update Summary:"
          echo "   • Files processed: ${#FILE_ARRAY[@]}"
          echo "   • Files updated: ${#UPDATED_FILES[@]}"
          echo "   • Changed: ${CHANGED}"
          echo ""
          
          if [ "${CHANGED}" = true ]; then
            echo "✅ Changes detected and applied"
            echo "📋 Updated files:"
            for updated_file in "${UPDATED_FILES[@]}"; do
              echo "   • ${updated_file}"
            done
          else
            echo "ℹ️  No changes needed"
          fi
          
          # Exportar outputs
          echo "changed=${CHANGED}" >> $GITHUB_OUTPUT
          echo "files_updated=${UPDATED_FILES[*]}" >> $GITHUB_OUTPUT
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ═══════════════════════════════════════════════════════════
      # 📊 PASO 4: MOSTRAR CAMBIOS
      # ═══════════════════════════════════════════════════════════
      - name: 📊 Show changes
        if: steps.update_files.outputs.changed == 'true'
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 GIT DIFF - CHANGES PREVIEW"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          git diff ${{ inputs.manifests_path }}
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ═══════════════════════════════════════════════════════════
      # 🔧 PASO 5: CONFIGURAR GIT
      # ═══════════════════════════════════════════════════════════
      - name: 🔧 Configure Git
        if: steps.update_files.outputs.changed == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # ═══════════════════════════════════════════════════════════
      # 💾 PASO 6A: COMMIT DIRECTO (SI NO SE CREA PR)
      # ═══════════════════════════════════════════════════════════
      - name: 💾 Commit changes
        id: commit
        if: steps.update_files.outputs.changed == 'true' && inputs.create_pr == false
        run: |
          # Mensaje de commit personalizado o por defecto
          if [ -n "${{ inputs.commit_message }}" ]; then
            COMMIT_MSG="${{ inputs.commit_message }}"
          else
            COMMIT_MSG="🔄 Update K8s manifests - ${{ inputs.environment }} - ${{ inputs.image_tag }}"
          fi
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "💾 COMMITTING CHANGES"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📝 Commit message: ${COMMIT_MSG}"
          echo "🌿 Target branch: ${{ inputs.target_branch }}"
          echo ""
          
          git add ${{ inputs.manifests_path }}
          git commit -m "${COMMIT_MSG}" \
            -m "Environment: ${{ inputs.environment }}" \
            -m "Image: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}" \
            -m "Updated files: ${{ steps.update_files.outputs.files_updated }}" \
            -m "Triggered by: ${{ github.actor }}" \
            -m "Workflow: ${{ github.workflow }}" \
            -m "Run ID: ${{ github.run_id }}"
          
          git push origin HEAD:${{ inputs.target_branch }}
          
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          
          echo ""
          echo "✅ Changes committed and pushed successfully"
          echo "🔗 Commit SHA: ${COMMIT_SHA}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ═══════════════════════════════════════════════════════════
      # 🔀 PASO 6B: CREAR PULL REQUEST (SI create_pr=true)
      # ═══════════════════════════════════════════════════════════
      - name: 🔀 Create Pull Request
        id: create_pr
        if: steps.update_files.outputs.changed == 'true' && inputs.create_pr == true
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_TOKEN }}
          commit-message: |
            🔄 Update K8s manifests - ${{ inputs.environment }} - ${{ inputs.image_tag }}
            
            Environment: ${{ inputs.environment }}
            Image: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}
            Updated files: ${{ steps.update_files.outputs.files_updated }}
          branch: k8s-update-${{ inputs.environment }}-${{ github.run_id }}
          delete-branch: true
          base: ${{ inputs.target_branch }}
          title: "🔄 Update K8s manifests - ${{ inputs.environment }} - ${{ inputs.image_tag }}"
          body: |
            ## 🔄 Kubernetes Manifests Update
            
            This PR updates the Kubernetes manifests with the new Docker image tag.
            
            ### 📋 Details
            - **Environment**: `${{ inputs.environment }}`
            - **New Image**: `${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}`
            - **Updated Files**: ${{ steps.update_files.outputs.files_updated }}
            - **Triggered by**: @${{ github.actor }}
            - **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### 🤖 Automated Changes
            This PR was automatically generated by the CI/CD pipeline after a successful build and deployment.
            
            ---
            
            Please review and merge to apply the changes to the `${{ inputs.target_branch }}` branch.
          labels: |
            automated
            k8s-update
            ${{ inputs.environment }}

      # ═══════════════════════════════════════════════════════════
      # 📊 PASO 7: RESUMEN FINAL
      # ═══════════════════════════════════════════════════════════
      - name: 📊 Summary Report
        if: always()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 KUBERNETES MANIFESTS UPDATE SUMMARY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌍 Environment: ${{ inputs.environment }}"
          echo "🐳 New Image: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          echo "📁 Manifests Path: ${{ inputs.manifests_path }}"
          echo "📄 Target Files: ${{ inputs.manifest_files }}"
          echo "🌿 Target Branch: ${{ inputs.target_branch }}"
          echo ""
          
          if [ "${{ steps.update_files.outputs.changed }}" = "true" ]; then
            echo "✅ Status: Changes applied"
            echo "📋 Updated Files: ${{ steps.update_files.outputs.files_updated }}"
            echo ""
            
            if [ "${{ inputs.create_pr }}" = "true" ]; then
              echo "🔀 Action: Pull Request created"
              echo "🔗 PR Number: ${{ steps.create_pr.outputs.pull-request-number }}"
              echo "🔗 PR URL: ${{ steps.create_pr.outputs.pull-request-url }}"
            else
              echo "💾 Action: Direct commit"
              echo "🔗 Commit SHA: ${{ steps.commit.outputs.commit_sha }}"
            fi
          else
            echo "ℹ️  Status: No changes needed"
            echo "   The manifests already have the correct image tag"
          fi
          
          echo ""
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "🕐 Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "🔗 Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"