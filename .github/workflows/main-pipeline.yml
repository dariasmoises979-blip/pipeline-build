########################################
# 🚀 PIPELINE QA - Con Modelo Híbrido
# Tests → Build Híbrido (con security) → Análisis Completo
########################################

name: QA Pipeline with Hybrid Security

on:
  push:
    branches:
      - integration
  pull_request:
    branches:
      - integration
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  pull-requests: write
  security-events: write

jobs:
  # ═══════════════════════════════════════════════════════════
  # 🧪 JOB 1: TESTS DE INTEGRACIÓN
  # ═══════════════════════════════════════════════════════════
  integration-tests:
    name: 🧪 Tests de Integración
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/integration.yml@main
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ═══════════════════════════════════════════════════════════
  # 🎯 JOB 2: BUILD HÍBRIDO CON SEGURIDAD (Multi-Environment)
  # Build → Quick Scan → Push → Full Scan
  # ═══════════════════════════════════════════════════════════
  build-hybrid-security:
    name: 🎯 Hybrid Build - ${{ matrix.environment }}
    needs: integration-tests
    strategy:
      matrix:
        environment: [pre, staging, pro]
      fail-fast: false  # Continúa aunque falle un entorno
    uses: dariasmoises979-blip/pipeline-build/.github/workflows/build-image-hybrid.yml@main
    with:
      docker_image: mi-aplicacion
      dockerhub_username: dariasmoises979
      environment: ${{ matrix.environment }}
      
      # Configuración del repo externo
      external_repo: dariasmoises979-blip/app  
      external_repo_ref: main
      external_repo_path: ./app-repo
      
      # Rutas del build
      dockerfile_path: ./app-repo/local/Dockerfile
      build_context: ./app-repo
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      EXTERNAL_REPO_TOKEN: ${{ secrets.GH2_TOKEN }}

  # ═══════════════════════════════════════════════════════════
  # 📊 JOB 3: REPORTE CONSOLIDADO FINAL
  # ═══════════════════════════════════════════════════════════
  final-consolidated-report:
    name: 📊 Reporte Consolidado
    needs: [integration-tests, build-hybrid-security]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 📥 Descargar todos los reportes de seguridad
        uses: actions/download-artifact@v4
        with:
          path: ./all-reports

      - name: 📊 Generar resumen ejecutivo
        run: |
          echo "# 🎯 Resumen Ejecutivo del Pipeline QA" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Fecha**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## ✅ Estado de Jobs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Estado |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Tests de Integración | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 Build Híbrido (pre) | $(echo '${{ toJSON(needs.build-hybrid-security.result) }}' | jq -r '. // "unknown"') |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 Build Híbrido (staging) | $(echo '${{ toJSON(needs.build-hybrid-security.result) }}' | jq -r '. // "unknown"') |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 Build Híbrido (pro) | $(echo '${{ toJSON(needs.build-hybrid-security.result) }}' | jq -r '. // "unknown"') |" >> $GITHUB_STEP_SUMMARY

      - name: 🐳 Analizar reportes de seguridad
        continue-on-error: true
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔐 Resumen de Seguridad por Entorno" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for env in pre staging pro; do
            REPORT_FILE="./all-reports/security-reports-${env}/trivy-report-${env}.json"
            
            if [ -f "$REPORT_FILE" ]; then
              CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' $REPORT_FILE)
              HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' $REPORT_FILE)
              MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' $REPORT_FILE)
              
              echo "### 🏷️ Entorno: \`$env\`" >> $GITHUB_STEP_SUMMARY
              echo "| Severidad | Cantidad |" >> $GITHUB_STEP_SUMMARY
              echo "|-----------|----------|" >> $GITHUB_STEP_SUMMARY
              echo "| 🔴 CRITICAL | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
              echo "| 🟠 HIGH | $HIGH |" >> $GITHUB_STEP_SUMMARY
              echo "| 🟡 MEDIUM | $MEDIUM |" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            else
              echo "### 🏷️ Entorno: \`$env\`" >> $GITHUB_STEP_SUMMARY
              echo "⚠️ No se encontró reporte de seguridad" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: 📦 Listar imágenes generadas
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Imágenes Publicadas en DockerHub" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Entorno | Imagen | Comando Pull |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|--------------|" >> $GITHUB_STEP_SUMMARY
          echo "| pre | \`dariasmoises979/mi-aplicacion:pre\` | \`docker pull dariasmoises979/mi-aplicacion:pre\` |" >> $GITHUB_STEP_SUMMARY
          echo "| staging | \`dariasmoises979/mi-aplicacion:staging\` | \`docker pull dariasmoises979/mi-aplicacion:staging\` |" >> $GITHUB_STEP_SUMMARY
          echo "| pro | \`dariasmoises979/mi-aplicacion:pro\` | \`docker pull dariasmoises979/mi-aplicacion:pro\` |" >> $GITHUB_STEP_SUMMARY

      - name: 🔗 Enlaces útiles
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Enlaces Útiles" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 [DockerHub Repository](https://hub.docker.com/r/dariasmoises979/mi-aplicacion)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔐 [Security Alerts](https://github.com/${{ github.repository }}/security)" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 [Artifacts de este run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 [Todos los workflows](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY

      - name: 🎉 Mensaje final
        if: needs.build-hybrid-security.result == 'success'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Pipeline Completado Exitosamente" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✨ Logros:" >> $GITHUB_STEP_SUMMARY
          echo