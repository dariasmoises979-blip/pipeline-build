name: Main Pipeline (Reusable)

# ═══════════════════════════════════════════════════════════
# 🔧 CONFIGURACIÓN PARA WORKFLOW REUTILIZABLE
# ═══════════════════════════════════════════════════════════
on:
  workflow_call:
    inputs:
      # Configuración básica
      docker_image:
        description: 'Nombre de la imagen Docker (sin usuario)'
        required: false
        type: string
        default: 'mi-aplicacion'
      
      dockerhub_username:
        description: 'Usuario de DockerHub'
        required: false
        type: string
        default: 'dariasmoises979'
      
      environment:
        description: 'Entorno de despliegue (pre/staging/pro)'
        required: false
        type: string
        default: 'pre'
      
      # Configuración de repositorio externo
      external_repo:
        description: 'Repositorio externo para clonar'
        required: false
        type: string
        default: ''
      
      external_repo_ref:
        description: 'Branch/tag del repositorio externo'
        required: false
        type: string
        default: 'main'
      
      external_repo_path:
        description: 'Ruta donde clonar el repo externo'
        required: false
        type: string
        default: './app-repo'
      
      # Rutas de build
      dockerfile_path:
        description: 'Ruta al Dockerfile'
        required: false
        type: string
        default: './Dockerfile'
      
      build_context:
        description: 'Contexto para el build de Docker'
        required: false
        type: string
        default: '.'
      
      # Opciones de seguridad
      enable_security_scan:
        description: 'Habilitar escaneo de seguridad'
        required: false
        type: boolean
        default: true
      
      enable_sonar:
        description: 'Habilitar análisis de SonarCloud'
        required: false
        type: boolean
        default: false
    
    secrets:
      DOCKERHUB_TOKEN:
        required: true
        description: 'Token de DockerHub'
      
      EXTERNAL_REPO_TOKEN:
        required: false
        description: 'Token para acceder al repositorio externo'
      
      SONAR_TOKEN:
        required: false
        description: 'Token de SonarCloud'
      
      GITHUB_TOKEN:
        required: false
        description: 'Token de GitHub (auto-generado)'

permissions:
  actions: read
  contents: read
  pull-requests: write
  security-events: write

jobs:
  # ═══════════════════════════════════════════════════════════
  # 🏗️ JOB: BUILD Y DESPLIEGUE
  # ═══════════════════════════════════════════════════════════
  build-and-deploy:
    name: 🏗️ Build - ${{ inputs.environment }}
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout repositorio actual
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN || github.token }}

      - name: 📦 Checkout repositorio externo
        if: inputs.external_repo != ''
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.external_repo }}
          ref: ${{ inputs.external_repo_ref }}
          token: ${{ secrets.EXTERNAL_REPO_TOKEN }}
          path: ${{ inputs.external_repo_path }}

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ inputs.dockerhub_username }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️ Build y Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.build_context }}
          file: ${{ inputs.dockerfile_path }}
          push: true
          tags: |
            ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.environment }}
            ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.environment }}-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔐 Security Scan con Trivy
        if: inputs.enable_security_scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.environment }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy results to GitHub Security
        if: inputs.enable_security_scan
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 📊 SonarCloud Scan
        if: inputs.enable_sonar
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN || github.token }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: ✅ Resumen de Build
        run: |
          echo "# 🎉 Build Completado - ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Imagen**: \`${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Pull Command:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY