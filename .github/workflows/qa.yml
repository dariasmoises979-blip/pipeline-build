########################################
# 🧪 WORKFLOW REUSABLE: QA Pipeline
# Ejecuta tests unitarios, integración, linting y análisis de calidad
# de código usando SonarCloud y CodeQL para entornos QA.
########################################

name: Reusable QA Workflow

# 🔧 Definir como workflow reusable con entradas y secretos configurables
on:
  workflow_call:
    secrets:
      SONAR_TOKEN:
        required: true
    inputs:
      branch:
        description: "Rama donde se ejecutarán los análisis (por defecto: qa)"
        required: false
        type: string
        default: "qa"
      projectBaseDir:
        description: "Directorio base del proyecto para SonarCloud"
        required: false
        type: string
        default: "./pipeline-build"
      sonar_args:
        description: "Argumentos adicionales para SonarCloud"
        required: false
        type: string
        default: ""

# 🔐 Permisos globales requeridos
permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  #  ═══════════════════════════════════════════════════════════
  #⚙️ JOB 0: PREPARACIÓN DEL ENTORNO (clona y empaqueta)
  #═══════════════════════════════════════════════════════════
  setup-qa:
    name: Preparar entorno QA
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout del workflow repo
        uses: actions/checkout@v4

      - name: 🔄 Clonar el repositorio externo (app)
        uses: actions/checkout@v4
        with:
          repository: dariasmoises979-blip/app
          ref: main
          path: pipeline-build
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 💾 Empaquetar código del proyecto
        run: tar -czf pipeline-build.tar.gz pipeline-build

      - name: 📤 Subir artefacto para siguientes jobs
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: pipeline-build.tar.gz
  # ═══════════════════════════════════════════════════════════
  # 🧩 JOB 1: TEST UNITARIOS
  # ═══════════════════════════════════════════════════════════
  test-qa:
    name: Ejecutar Tests Unitarios
    runs-on: ubuntu-latest

    steps:
      - name: 💾 Descargar artefacto del proyecto
        uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: 📦 Extraer proyecto
        run: tar -xzf pipeline-build.tar.gz

      - name: 🐍 Configurar entorno Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: ⚙️ Instalar dependencias
        working-directory: ./pipeline-build/local
        run: pip install -r requirements.txt

      - name: 🧪 Ejecutar tests unitarios
        working-directory: ./pipeline-build/system_info_app
        run: pytest -v


  # ═══════════════════════════════════════════════════════════
  # 🔗 JOB 2: TEST DE INTEGRACIÓN
  # ═══════════════════════════════════════════════════════════
  test-integration-qa:
    name: Ejecutar Tests de Integración
    runs-on: ubuntu-latest
    needs: test-qa

    steps:
      - name: 💾 Descargar artefacto del proyecto
        uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: 📦 Extraer proyecto
        run: tar -xzf pipeline-build.tar.gz

      - name: 🔍 Pruebas de integración
        working-directory: ./pipeline-build/system_info_app
        run: echo "Ejecutar pruebas de integración aquí"


  # ═══════════════════════════════════════════════════════════
  # 🧹 JOB 3: LINTING Y ANÁLISIS ESTÁTICO
  # ═══════════════════════════════════════════════════════════
  test-lint-qa:
    name: Análisis de Estilo y Linting
    runs-on: ubuntu-latest
    needs: test-integration-qa

    steps:
      - name: 💾 Descargar artefacto del proyecto
        uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: 📦 Extraer proyecto
        run: tar -xzf pipeline-build.tar.gz

      - name: 🔎 Análisis de estilo (flake8 o similar)
        working-directory: ./pipeline-build/system_info_app
        run: echo "Análisis de estilo o linting con flake8/pylint"


  # ═══════════════════════════════════════════════════════════
  # ☁️ JOB 4: ANÁLISIS DE SONARCLOUD
  # ═══════════════════════════════════════════════════════════
  sonarcloud-qa:
    name: Análisis de Calidad con SonarCloud
    runs-on: ubuntu-latest
    needs: test-lint-qa

    steps:
      - name: 💾 Descargar artefacto del proyecto
        uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: 📦 Extraer proyecto
        run: tar -xzf pipeline-build.tar.gz

      - name: 🐍 Configurar entorno Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: ⚙️ Instalar dependencias
        working-directory: ./pipeline-build/local
        run: pip install -r requirements.txt

      - name: 🧠 Ejecutar análisis con SonarCloud
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: ${{ inputs.projectBaseDir }}
          args: ${{ inputs.sonar_args }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

      - name: 🔗 Mostrar enlace de resultados
        run: |
          echo "✅ Revisión completada. Resultados:"
          echo "https://sonarcloud.io/project/overview?id=dariasmoises979-blip_app"

  # ═══════════════════════════════════════════════════════════
  # 🕵️ JOB 5: DETECCIÓN DE SECRETOS
  # ═══════════════════════════════════════════════════════════
  secrets_detection:
    name: Detección de Claves o Secretos
    runs-on: ubuntu-latest
    needs: sonarcloud-qa
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: 💾 Descargar artefacto del proyecto
        uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: 📦 Extraer proyecto
        run: tar -xzf pipeline-build.tar.gz

      - name: 🔍 Inicializar CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: 🧠 Ejecutar análisis de CodeQL (secret detection)
        uses: github/codeql-action/analyze@v3
        with:
          category: "secret"

      - name: ✅ Confirmación de seguridad
        run: echo "Verificación de secretos completada"

  # ═══════════════════════════════════════════════════════════
  # 🛡️ JOB 6: ANÁLISIS DE VULNERABILIDADES
  # ═══════════════════════════════════════════════════════════
  security_vulnerabilities:
    name: Análisis de Vulnerabilidades de Seguridad
    runs-on: ubuntu-latest
    needs: secrets_detection

    steps:
      - name: 💾 Descargar artefacto del proyecto
        uses: actions/download-artifact@v4
        with:
          name: app-build

      - name: 📦 Extraer proyecto
        run: tar -xzf pipeline-build.tar.gz

      - name: 🔍 Inicializar CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: 🧠 Ejecutar análisis de seguridad
        uses: github/codeql-action/analyze@v3
        with:
          category: "security"

      - name: ✅ Confirmación final
        run: echo "Análisis de vulnerabilidades completado"
