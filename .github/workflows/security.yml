########################################
# 🛡️ WORKFLOW REUSABLE: Security & Performance Analysis
# Analiza la seguridad, vulnerabilidades y rendimiento
# de imágenes Docker, integrando CodeQL, Trivy, Grype, Hadolint y Dive.
########################################

name: Security & Performance Analysis

# 🔧 Definir como workflow reusable con inputs y secretos configurables
on:
  workflow_call:
    inputs:
      image_name:
        description: "Nombre de la imagen Docker a analizar"
        required: false
        type: string
        default: "myapp"
      image_tag:
        description: "Tag de la imagen Docker a analizar"
        required: false
        type: string
        default: "latest"
      enable_sonar:
        description: "Habilitar análisis de SonarCloud (true/false)"
        required: false
        type: boolean
        default: false
    secrets:
      SONAR_TOKEN:
        required: false
      DOCKERHUB_TOKEN:
        required: false

# 🔐 Permisos necesarios para los análisis y reportes
permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: write

jobs:
  # ═══════════════════════════════════════════════════════════
  # 🔍 JOB 1: ANÁLISIS DE CÓDIGO ESTÁTICO (CODEQL)
  # ═══════════════════════════════════════════════════════════
  code-analysis:
    name: Análisis de Código Estático
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout del código principal
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔄 Clonar repositorio app
        uses: actions/checkout@v4
        with:
          repository: dariasmoises979-blip/app
          ref: main
          path: pipeline-build
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧠 Inicializar CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'javascript,python,java'

      - name: ⚙️ Autobuild del proyecto
        uses: github/codeql-action/autobuild@v2

      - name: 🔍 Ejecutar análisis CodeQL
        uses: github/codeql-action/analyze@v2

  # ═══════════════════════════════════════════════════════════
  # 🐳 JOB 2: CONSTRUCCIÓN DE IMAGEN DOCKER
  # ═══════════════════════════════════════════════════════════
  build-image:
    name: Construcción de Imagen Docker
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build.outputs.image }}

    steps:
      - name: 📦 Clonar el repositorio app
        uses: actions/checkout@v4
        with:
          repository: dariasmoises979-blip/app
          ref: main
          fetch-depth: 1

      - name: 🧱 Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔨 Construir imagen Docker
        id: build
        run: |
          docker build -t ${{ inputs.image_name }}:${{ inputs.image_tag }} -f local/Dockerfile .
          echo "image=${{ inputs.image_name }}:${{ inputs.image_tag }}" >> $GITHUB_OUTPUT

  # ═══════════════════════════════════════════════════════════
  # 🔐 JOB 3: ANÁLISIS DE SEGURIDAD DE IMAGEN
  # ═══════════════════════════════════════════════════════════
  security-scan:
    name: Escaneo de Seguridad de Imagen Docker
    needs: build-image
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Clonar repositorio app
        uses: actions/checkout@v4
        with:
          repository: dariasmoises979-blip/app
          ref: main
          fetch-depth: 1

      - name: 🧱 Construir imagen para escaneo
        run: |
          docker build -t ${{ inputs.image_name }}:${{ inputs.image_tag }} -f local/Dockerfile .

      - name: 🔎 Escaneo con Trivy (SARIF)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ inputs.image_name }}:${{ inputs.image_tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: 📤 Subir resultados Trivy a GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🧾 Escaneo Trivy (tabla resumida)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ inputs.image_name }}:${{ inputs.image_tag }}
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: 🧬 Escaneo con Grype
        uses: anchore/scan-action@v3
        with:
          image: ${{ inputs.image_name }}:${{ inputs.image_tag }}
          fail-build: false
          severity-cutoff: high

      - name: 🧩 Análisis Dockerfile con Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./local/Dockerfile
          failure-threshold: warning

  # ═══════════════════════════════════════════════════════════
  # ⚙️ JOB 4: ANÁLISIS DE RENDIMIENTO Y OPTIMIZACIÓN
  # ═══════════════════════════════════════════════════════════
  performance-analysis:
    name: Análisis de Eficiencia de Imagen
    needs: build-image
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Clonar repositorio app
        uses: actions/checkout@v4
        with:
          repository: dariasmoises979-blip/app
          ref: main
          fetch-depth: 1

      - name: 🧱 Construir imagen
        run: |
          docker build -t ${{ inputs.image_name }}:${{ inputs.image_tag }} -f local/Dockerfile .

      - name: 📊 Analizar tamaño de imagen
        id: image_size
        run: |
          IMAGE_SIZE=$(docker images ${{ inputs.image_name }}:${{ inputs.image_tag }} --format "{{.Size}}")
          echo "size=$IMAGE_SIZE" >> $GITHUB_OUTPUT
          echo "### 📊 Tamaño de Imagen: $IMAGE_SIZE" >> $GITHUB_STEP_SUMMARY

      - name: 🔍 Analizar capas Docker
        run: |
          echo "### 🔍 Capas Docker" >> $GITHUB_STEP_SUMMARY
          docker history ${{ inputs.image_name }}:${{ inputs.image_tag }} --no-trunc >> $GITHUB_STEP_SUMMARY

      - name: 🧠 Dive - Análisis de eficiencia
        run: |
          wget https://github.com/wagoodman/dive/releases/download/v0.11.0/dive_0.11.0_linux_amd64.deb
          sudo apt install ./dive_0.11.0_linux_amd64.deb
          CI=true dive ${{ inputs.image_name }}:${{ inputs.image_tag }}

      - name: 🧩 Container Structure Test
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
          
          cat > container-test.yaml << 'EOF'
          schemaVersion: 2.0.0
          fileExistenceTests:
            - name: 'Root Directory'
              path: '/'
              shouldExist: true
          metadataTest:
            exposedPorts: []
            env: []
          EOF
          
          container-structure-test test --image ${{ inputs.image_name }}:${{ inputs.image_tag }} --config container-test.yaml

  # ═══════════════════════════════════════════════════════════
  # ⚡ JOB 5: PRUEBAS DE RENDIMIENTO EN TIEMPO DE EJECUCIÓN
  # ═══════════════════════════════════════════════════════════
  runtime-performance:
    name: Rendimiento en Tiempo de Ejecución
    needs: build-image
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Clonar repositorio app
        uses: actions/checkout@v4
        with:
          repository: dariasmoises979-blip/app
          ref: main
          fetch-depth: 1

      - name: 🧱 Construir imagen
        run: |
          docker build -t ${{ inputs.image_name }}:${{ inputs.image_tag }} -f local/Dockerfile .

      - name: ⏱️ Medir tiempo de inicio del contenedor
        id: startup_test
        run: |
          echo "### ⏱️ Tiempo de Inicio del Contenedor" >> $GITHUB_STEP_SUMMARY
          START=$(date +%s%N)
          CONTAINER_ID=$(docker run -d ${{ inputs.image_name }}:${{ inputs.image_tag }})
          
          TIMEOUT=30
          ELAPSED=0
          while [ $ELAPSED -lt $TIMEOUT ]; do
            if docker ps | grep -q $CONTAINER_ID; then
              break
            fi
            sleep 1
            ELAPSED=$((ELAPSED + 1))
          done
          
          END=$(date +%s%N)
          DURATION=$(( (END - START) / 1000000 ))
          echo "startup_time=${DURATION}ms" >> $GITHUB_OUTPUT
          echo "- **Tiempo de inicio**: ${DURATION}ms" >> $GITHUB_STEP_SUMMARY
          
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID

      - name: 💻 Análisis de uso de recursos
        run: |
          echo "### 💻 Uso de Recursos del Contenedor" >> $GITHUB_STEP_SUMMARY
          CONTAINER_ID=$(docker run -d ${{ inputs.image_name }}:${{ inputs.image_tag }} sleep 60)
          sleep 5
          
          STATS=$(docker stats --no-stream --format "table {{.CPUPerc}}\t{{.MemUsage}}" $CONTAINER_ID)
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "$STATS" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID

  # ═══════════════════════════════════════════════════════════
  # 📋 JOB 6: GENERACIÓN DE RECOMENDACIONES Y REPORTE
  # ═══════════════════════════════════════════════════════════
  generate-recommendations:
    name: Generar Reporte de Sugerencias
    needs: [security-scan, performance-analysis, runtime-performance]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 📦 Checkout del código principal
        uses: actions/checkout@v4

      - name: 🔄 Clonar repositorio app
        uses: actions/checkout@v4
        with:
          repository: dariasmoises979-blip/app
          ref: main
          path: pipeline-build
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Generar reporte de sugerencias
        run: |
          cat > recommendations.md << 'EOF'
          # 🔐 Reporte de Seguridad y Rendimiento
          
          ## 📋 Resumen Ejecutivo
          Este reporte contiene sugerencias para mejorar la seguridad y rendimiento de tu imagen Docker.
          
          ## 🛡️ Sugerencias de Seguridad
          - Revisa vulnerabilidades CRITICAL y HIGH detectadas por Trivy o Grype
          - Usa imágenes base más seguras (Alpine, Distroless)
          - Evita ejecutar contenedores como root
          - Minimiza el número de capas y usa `.dockerignore`
          
          ## ⚡ Sugerencias de Rendimiento
          - Reduce el tamaño de la imagen eliminando archivos temporales
          - Usa multi-stage builds
          - Implementa health checks y límites de recursos
          
          ## ✅ Checklist
          - [ ] Corregir vulnerabilidades críticas
          - [ ] Implementar usuario no-root
          - [ ] Agregar `.dockerignore`
          - [ ] Optimizar capas del Dockerfile
          - [ ] Configurar límites de CPU/memoria
          - [ ] Revisar dependencias vulnerables
          
          EOF
          
          cat recommendations.md >> $GITHUB_STEP_SUMMARY

      - name: 📤 Subir reporte como artefacto
        uses: actions/upload-artifact@v3
        with:
          name: security-performance-recommendations
          path: recommendations.md

      - name: 💬 Comentar en Pull Request (si aplica)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const recommendations = fs.readFileSync('recommendations.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: recommendations
            });
