name: Deployment Main Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Target environment (dev, staging, pre, prod)'
      image_tag:
        required: true
        type: string
        description: 'Docker image tag to deploy (formato: environment-shortsha)'
      dockerhub_username:
        required: true
        type: string
        description: 'Usuario de Docker Hub'
      docker_image:
        required: true
        type: string
        description: 'Nombre de la imagen Docker'
      requires_approval:
        required: false
        type: boolean
        default: false
        description: 'Whether this deployment requires manual approval'

jobs:
  # ═══════════════════════════════════════════════════════════
  # 📦 JOB 1: MOSTRAR INFORMACIÓN DE LA IMAGEN
  # ═══════════════════════════════════════════════════════════
  show-deployment-info:
    name: 📦 Show Image Information
    runs-on: ubuntu-latest
    steps:
      - name: Display Deployment Information
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 DEPLOYMENT INFORMATION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌍 Environment: ${{ inputs.environment }}"
          echo "🏷️  Image Tag: ${{ inputs.image_tag }}"
          echo "📦 Docker Image: ${{ inputs.docker_image }}"
          echo "👤 Docker Hub User: ${{ inputs.dockerhub_username }}"
          echo "🔐 Requires Approval: ${{ inputs.requires_approval }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔗 Triggered by: ${{ github.event_name }}"
          echo "📂 Repository: ${{ github.repository }}"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "👤 Actor: ${{ github.actor }}"
          echo "🕐 Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Show Docker Image Details
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🐳 DOCKER IMAGE DETAILS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Full Image Path:"
          echo "   ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          echo ""
          echo "📋 Pull Command:"
          echo "   docker pull ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          echo ""
          echo "🔗 Docker Hub URL:"
          echo "   https://hub.docker.com/r/${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}/tags"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Verify Image Tag Format
        run: |
          IMAGE_TAG="${{ inputs.image_tag }}"
          ENVIRONMENT="${{ inputs.environment }}"
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔍 IMAGE TAG VALIDATION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Verificar que el tag comienza con el nombre del entorno
          if [[ "${IMAGE_TAG}" == "${ENVIRONMENT}-"* ]]; then
            echo "✅ Tag format is correct: ${IMAGE_TAG}"
            echo "✅ Matches environment: ${ENVIRONMENT}"
            
            # Extraer el SHORT_SHA del tag
            SHORT_SHA="${IMAGE_TAG#${ENVIRONMENT}-}"
            echo "📝 Short SHA extracted: ${SHORT_SHA}"
          else
            echo "⚠️  Warning: Tag '${IMAGE_TAG}' doesn't follow expected format '${ENVIRONMENT}-<short-sha>'"
            echo "⚠️  Deployment will continue, but verify this is the correct image"
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  # ═══════════════════════════════════════════════════════════
  # 🚀 JOB 2: DEPLOY AUTOMÁTICO (DEV & STAGING)
  # ═══════════════════════════════════════════════════════════
  deploy-auto:
    name: 🚀 Deploy to ${{ inputs.environment }} (Auto)
    if: inputs.environment == 'dev' || inputs.environment == 'staging'
    needs: show-deployment-info
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull Docker Image
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📥 PULLING DOCKER IMAGE"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          FULL_IMAGE="${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          echo "🐳 Pulling: ${FULL_IMAGE}"
          
          # Intentar pull (puedes comentar esto si prefieres no hacer pull aquí)
          # docker pull ${FULL_IMAGE}
          
          echo "✅ Image reference validated"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Deploy to ${{ inputs.environment }}
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔄 DEPLOYING TO ${{ inputs.environment }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Using image: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          echo ""
          
          # ═══════════════════════════════════════════════════
          # 🔧 AQUÍ VAN TUS COMANDOS DE DESPLIEGUE
          # ═══════════════════════════════════════════════════
          # Ejemplos según tu plataforma:
          
          # Para Kubernetes:
          # kubectl set image deployment/my-app \
          #   app=${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }} \
          #   -n ${{ inputs.environment }}
          
          # Para Docker Compose:
          # export IMAGE_TAG=${{ inputs.image_tag }}
          # docker-compose -f docker-compose.${{ inputs.environment }}.yml up -d
          
          # Para AWS ECS:
          # aws ecs update-service \
          #   --cluster my-cluster-${{ inputs.environment }} \
          #   --service my-service \
          #   --force-new-deployment
          
          # Para Azure Container Instances:
          # az container create \
          #   --resource-group my-rg \
          #   --name my-app-${{ inputs.environment }} \
          #   --image ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}
          
          echo "✅ Deployment commands executed"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
      - name: Verify Deployment
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ DEPLOYMENT TO ${{ inputs.environment }} COMPLETED"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Image deployed: ${{ inputs.image_tag }}"
          echo "🌍 Environment: ${{ inputs.environment }}"
          echo "🕐 Completed at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  # ═══════════════════════════════════════════════════════════
  # 🔐 JOB 3: DEPLOY MANUAL (PRE & PROD)
  # ═══════════════════════════════════════════════════════════
  deploy-manual:
    name: 🔐 Deploy to ${{ inputs.environment }} (Manual)
    if: inputs.environment == 'pre' || inputs.environment == 'prod'
    needs: show-deployment-info
    runs-on: ubuntu-latest
    environment: 
      name: ${{ inputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Manual Approval Required
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "⚠️  MANUAL DEPLOYMENT TO ${{ inputs.environment }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔐 This deployment requires approval through GitHub Environments"
          echo "📦 Image to deploy: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          echo "⏳ Waiting for approval..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Pull Docker Image
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📥 PULLING DOCKER IMAGE"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          FULL_IMAGE="${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          echo "🐳 Pulling: ${FULL_IMAGE}"
          
          # Intentar pull (puedes comentar esto si prefieres no hacer pull aquí)
          # docker pull ${FULL_IMAGE}
          
          echo "✅ Image reference validated"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Deploy to ${{ inputs.environment }}
        id: deploy
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🔄 DEPLOYING TO ${{ inputs.environment }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Using image: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.image_tag }}"
          echo ""
          
          # ═══════════════════════════════════════════════════
          # 🔧 AQUÍ VAN TUS COMANDOS DE DESPLIEGUE
          # ═══════════════════════════════════════════════════
          # (Los mismos ejemplos que en deploy-auto)
          
          echo "✅ Deployment commands executed"
          
          # Configurar URL del entorno según el ambiente
          if [ "${{ inputs.environment }}" == "prod" ]; then
            echo "url=https://prod.example.com" >> $GITHUB_OUTPUT
          else
            echo "url=https://pre.example.com" >> $GITHUB_OUTPUT
          fi
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
      - name: Verify Deployment
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ DEPLOYMENT TO ${{ inputs.environment }} COMPLETED"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Image deployed: ${{ inputs.image_tag }}"
          echo "🌍 Environment: ${{ inputs.environment }}"
          echo "🌐 Environment URL: ${{ steps.deploy.outputs.url }}"
          echo "🕐 Completed at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  # ═══════════════════════════════════════════════════════════
  # 📊 JOB 4: NOTIFICACIÓN FINAL
  # ═══════════════════════════════════════════════════════════
  notify:
    name: 📊 Deployment Summary
    needs: [show-deployment-info, deploy-auto, deploy-manual]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 DEPLOYMENT SUMMARY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌍 Environment: ${{ inputs.environment }}"
          echo "📦 Docker Image: ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}"
          echo "🏷️  Image Tag: ${{ inputs.image_tag }}"
          echo "📊 Status: ${{ job.status }}"
          echo "👤 Deployed by: ${{ github.actor }}"
          echo "🕐 Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "🔗 Workflow Run:"
          echo "   ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "🐳 Docker Hub:"
          echo "   https://hub.docker.com/r/${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}/tags"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
      # Opcional: Agregar notificaciones a Slack, Teams, etc.
      # - name: Send Slack Notification
      #   if: always()
      #   uses: slackapi/slack-github-action@v1
      #   with:
      #     payload: |
      #       {
      #         "text": "Deployment to ${{ inputs.environment }}: ${{ job.status }}",
      #         "blocks": [
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "*Deployment Summary*\n• Environment: `${{ inputs.environment }}`\n• Image: `${{ inputs.image_tag }}`\n• Status: ${{ job.status }}"
      #             }
      #           }
      #         ]
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}