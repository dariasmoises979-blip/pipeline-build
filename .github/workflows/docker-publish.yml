name: Reusable Build & Push Workflow

on:
  workflow_call:
    inputs:
      docker_image:
        description: "Nombre de la imagen Docker (sin tag)"
        required: true
        type: string
      dockerhub_username:
        description: "Usuario de Docker Hub (texto literal, no secret)"
        required: true
        type: string
    secrets:
      DOCKERHUB_TOKEN:
        required: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Instalar dependencias
        run: |
          pip install flask pytest

      - name: Ejecutar tests
        run: pytest -v

  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Mostrar archivos
        run: ls -la

      - name: Ejecutar checkout 
        run: echo "Checkout ejecutado correctamente"
    needs: build-test

  sonarcloud:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Ejecutar análisis de SonarCloud
        run: echo "Análisis de SonarCloud ejecutado correctamente"
    needs: checkout
    
  qa:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Ejecutar pruebas de QA
        run: echo "Pruebas de QA ejecutadas correctamente"
    needs: sonarcloud

  docker:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código principal
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: main

      - name: Clonar el repositorio pipeline-build
        uses: actions/checkout@v4
        with:
            repository: dariasmoises979-blip/app
            ref: main   # ⚠️ O usa 'master' si esa es la rama principal
            path: pipeline-build
            fetch-depth: 1
  
            
      - name: Mostrar archivos del repositorio clonado
        run: ls -la

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
           fetch-depth: 0
           ref: ${{ github.event.pull_request.head.sha || github.sha }}


      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container  # evita el error de cache

      - name: Login en Docker Hub
        uses: docker/login-action@v3
        with:
            username: ${{ inputs.dockerhub_username }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
            logout: true
      
      - name: Checkout completo para PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
          fetch-depth: 0
      
      - name: Set image tag
        id: vars
        run: |
              if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                echo "TAG=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
              else
                echo "TAG=latest" >> $GITHUB_OUTPUT
              fi

      - name: Construir y publicar imagen (con cache y tag dinámico)
        uses: docker/build-push-action@v6
        with:
           # Ruta donde están el Dockerfile y los archivos necesarios
          context: main

           # (opcional) Si el Dockerfile no está en la raíz del contexto
          file: ./local/Dockerfile
          push: true
          tags: |
             ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:latest
             ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
