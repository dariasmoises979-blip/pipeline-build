name: Reusable Build & Push Workflow

on:
  workflow_call:
    inputs:
      docker_image:
        description: "Nombre de la imagen Docker (sin tag)"
        required: true
        type: string
      dockerhub_username:
        description: "Usuario de Docker Hub (texto literal, no secret)"
        required: true
        type: string
    secrets:
      DOCKERHUB_TOKEN:
        required: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Instalar dependencias
        run: |
          pip install flask pytest

      - name: Ejecutar tests
        run: pytest -v

        
  docker:
    needs: build-test
    runs-on: ubuntu-latest
   
    steps:
      - name: Checkout del código principal
        uses: actions/checkout@v4
 
      - name: Clona el repositorio de pipeline-build
        uses: actions/checkout@v4
        with:
            repository: dariasmoises979-blip/app
            
      - name: Mostrar archivos del repositorio clonado
        run: ls -la

      # 1️⃣ Checkout con soporte para PRs (evita el error refs/pull/*/merge)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      # 2️⃣ Login a Docker Hub
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ inputs.dockerhub_username }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3️⃣ Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4️⃣ Definir etiqueta dinámica según tipo de evento
      - name: Set image tag
        id: vars
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "TAG=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
          else
              echo "TAG=latest" >> $GITHUB_OUTPUT
          fi

      # 5️⃣ Construir y publicar la imagen
      - name: Construir y publicar imagen (con cache y tag dinámico)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./local/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}  # no publica en PR
          tags: |
              ${{ inputs.dockerhub_username }}/system-info-app:${{ steps.vars.outputs.TAG }}
                ${{ inputs.dockerhub_username }}/system-info-app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
