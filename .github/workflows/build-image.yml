########################################
# 🐳 WORKFLOW REUSABLE: Build & Push Docker Image
# Construye y publica imágenes Docker con tags automáticos
# basados en el entorno (pro, pre, staging) y commit SHA
########################################

name: Reusable Build & Push Docker

# 🔧 Definir como workflow reusable con inputs configurables
on:
  workflow_call:
    inputs:
      docker_image:
        description: 'Nombre de la imagen Docker (sin tag, ej: mi-app)'
        required: true
        type: string
      dockerhub_username:
        description: 'Usuario de Docker Hub (texto literal, no secret)'
        required: true
        type: string
      environment:
        description: 'Entorno de deployment (pro/pre/staging/dev)'
        required: false
        type: string
        default: 'dev'
      dockerfile_path:
        description: 'Ruta al Dockerfile (relativo al contexto)'
        required: false
        type: string
        default: './Dockerfile'
      build_context:
        description: 'Directorio de contexto para el build'
        required: false
        type: string
        default: '.'
      additional_tags:
        description: 'Tags adicionales separados por coma (ej: v1.0.0,stable)'
        required: false
        type: string
        default: ''
    secrets:
      DOCKERHUB_TOKEN:
        description: 'Token de autenticación de Docker Hub'
        required: true

jobs:
  # ═══════════════════════════════════════════════════════════
  # 🐳 JOB: BUILD & PUSH DOCKER IMAGE
  # ═══════════════════════════════════════════════════════════
  docker-build-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      # ═══════════════════════════════════════════════════════════
      # 📥 PASO 1: CHECKOUT DEL CÓDIGO FUENTE
      # ═══════════════════════════════════════════════════════════
      # Clona el repositorio con todo el historial para tener
      # acceso completo a commits y tags
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 📚 Obtiene todo el historial (necesario para tags y SHA)
          # Si es un PR, usa el SHA del head del PR, sino usa el SHA actual
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      - name: Debug credentials
        run: |
            echo "Username: ${{ inputs.dockerhub_username }}"
            echo "Token exists: ${{ secrets.DOCKERHUB_TOKEN != '' }}"
            echo "Token length: $(echo '${{ secrets.DOCKERHUB_TOKEN }}' | wc -c)"
      # ═══════════════════════════════════════════════════════════
      # 🏷️ PASO 2: GENERAR TAGS DINÁMICOS
      # ═══════════════════════════════════════════════════════════
      # Crea tags basados en: entorno, SHA del commit, rama, etc.
      - name: Generate dynamic tags
        id: tags
        run: |
          # ───────────────────────────────────────────────────────
          # Variables básicas del contexto
          # ───────────────────────────────────────────────────────
          ENVIRONMENT="${{ inputs.environment }}"
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"  # Primeros 7 caracteres del SHA
          BRANCH_NAME="${{ github.ref_name }}"
          
          # ───────────────────────────────────────────────────────
          # Construir array de tags
          # ───────────────────────────────────────────────────────
          TAGS=()
          
          # Tag 1: Entorno (pro, pre, staging, dev)
          TAGS+=("${ENVIRONMENT}")
          
          # Tag 2: Entorno + SHA corto (ej: pro-a1b2c3d)
          TAGS+=("${ENVIRONMENT}-${SHORT_SHA}")
          
          # Tag 3: SHA completo (ej: a1b2c3d4e5f6g7h8...)
          TAGS+=("${COMMIT_SHA}")
          
          # Tag 4: SHA corto (ej: a1b2c3d)
          TAGS+=("${SHORT_SHA}")
          
          # Tag 5: Si es la rama principal, añadir "latest"
          if [[ "${BRANCH_NAME}" == "main" || "${BRANCH_NAME}" == "master" ]]; then
            TAGS+=("latest")
          fi
          
          # Tag 6: Rama + SHA (ej: develop-a1b2c3d)
          # Reemplazar '/' por '-' en el nombre de la rama
          SAFE_BRANCH_NAME=$(echo "${BRANCH_NAME}" | sed 's/\//-/g')
          TAGS+=("${SAFE_BRANCH_NAME}-${SHORT_SHA}")
          
          # ───────────────────────────────────────────────────────
          # Añadir tags adicionales si se proporcionaron
          # ───────────────────────────────────────────────────────
          if [[ -n "${{ inputs.additional_tags }}" ]]; then
            IFS=',' read -ra EXTRA_TAGS <<< "${{ inputs.additional_tags }}"
            for tag in "${EXTRA_TAGS[@]}"; do
              # Eliminar espacios en blanco
              tag=$(echo "${tag}" | xargs)
              if [[ -n "${tag}" ]]; then
                TAGS+=("${tag}")
              fi
            done
          fi
          
          # ───────────────────────────────────────────────────────
          # Formatear tags para Docker (username/image:tag)
          # ───────────────────────────────────────────────────────
          DOCKER_TAGS=""
          for tag in "${TAGS[@]}"; do
            DOCKER_TAGS="${DOCKER_TAGS}${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${tag},"
          done
          # Eliminar la última coma
          DOCKER_TAGS="${DOCKER_TAGS%,}"
          
          # ───────────────────────────────────────────────────────
          # Guardar tags para usar en steps posteriores
          # ───────────────────────────────────────────────────────
          echo "tags=${DOCKER_TAGS}" >> $GITHUB_OUTPUT
          
          # ───────────────────────────────────────────────────────
          # Log: Mostrar todos los tags generados
          # ───────────────────────────────────────────────────────
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🏷️  TAGS GENERADOS PARA LA IMAGEN DOCKER"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Imagen base: ${{ inputs.docker_image }}"
          echo "🌍 Entorno: ${ENVIRONMENT}"
          echo "🔗 Commit SHA: ${COMMIT_SHA}"
          echo "🌿 Rama: ${BRANCH_NAME}"
          echo ""
          echo "📋 Lista de tags:"
          for tag in "${TAGS[@]}"; do
            echo "   • ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${tag}"
          done
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ═══════════════════════════════════════════════════════════
      # ⚙️ PASO 3: CONFIGURAR DOCKER BUILDX
      # ═══════════════════════════════════════════════════════════
      # Docker Buildx permite builds más eficientes con cache
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container  # 🚀 Evita errores de cache y mejora performance

      # ═══════════════════════════════════════════════════════════
      # 🔐 PASO 4: LOGIN EN DOCKER HUB
      # ═══════════════════════════════════════════════════════════
      # Autentica con Docker Hub para poder hacer push de imágenes
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ inputs.dockerhub_username }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true  # 🔒 Logout automático al finalizar (seguridad)

      # ═══════════════════════════════════════════════════════════
      # 🏗️ PASO 5: BUILD & PUSH DE LA IMAGEN DOCKER
      # ═══════════════════════════════════════════════════════════
      # Construye la imagen y la sube a Docker Hub con todos los tags
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.build_context }}      # 📂 Directorio de contexto
          file: ${{ inputs.dockerfile_path }}        # 📄 Ruta al Dockerfile
          push: true                                 # ⬆️ Hacer push a Docker Hub
          tags: ${{ steps.tags.outputs.tags }}      # 🏷️ Todos los tags generados
          # ───────────────────────────────────────────────────────
          # Cache de GitHub Actions para acelerar builds
          # ───────────────────────────────────────────────────────
          cache-from: type=gha                       # 📥 Usar cache de builds previos
          cache-to: type=gha,mode=max               # 📤 Guardar cache para futuros builds
          # ───────────────────────────────────────────────────────
          # Build args opcionales (se pueden pasar variables)
          # ───────────────────────────────────────────────────────
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ inputs.environment }}-${{ github.sha }}

      # ═══════════════════════════════════════════════════════════
      # 📊 PASO 6: REPORTE DE BUILD EXITOSO
      # ═══════════════════════════════════════════════════════════
      # Muestra información detallada del build completado
      - name: Build Summary Report
        if: success()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ DOCKER IMAGE BUILD & PUSH SUCCESSFUL"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🐳 Docker Hub: https://hub.docker.com/r/${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}"
          echo "📦 Image Name: ${{ inputs.docker_image }}"
          echo "🌍 Environment: ${{ inputs.environment }}"
          echo "🔗 Commit SHA: ${{ github.sha }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "🕐 Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "📋 Pull Commands:"
          echo "   docker pull ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.environment }}"
          echo "   docker pull ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${GITHUB_SHA:0:7}"
          echo ""
          echo "🔗 Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ═══════════════════════════════════════════════════════════
      # ❌ PASO 7: MANEJO DE ERRORES
      # ═══════════════════════════════════════════════════════════
      # Si el build falla, proporciona información útil para debugging
      - name: Build Failure Report
        if: failure()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "❌ DOCKER BUILD FAILED"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "⚠️  Possible reasons:"
          echo "   • Dockerfile syntax errors"
          echo "   • Missing dependencies in build context"
          echo "   • Docker Hub authentication issues"
          echo "   • Network or timeout problems"
          echo "   • Insufficient disk space"
          echo ""
          echo "🔍 Debug steps:"
          echo "   1. Check Dockerfile at: ${{ inputs.dockerfile_path }}"
          echo "   2. Verify build context: ${{ inputs.build_context }}"
          echo "   3. Review Docker Hub credentials"
          echo "   4. Check workflow logs above for specific errors"
          echo ""
          echo "🔗 Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          exit 1