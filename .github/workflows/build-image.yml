########################################
# 🐳 WORKFLOW REUSABLE: Build & Push Docker Image
# Construye y publica imágenes Docker con tags automáticos
# basados en el entorno (pro, pre, staging) y commit SHA
########################################

name: Reusable Build & Push Docker

# 🔧 Definir como workflow reusable con inputs configurables
on:
  workflow_call:
    inputs:
      docker_image:
        description: 'Nombre de la imagen Docker (sin tag, ej: mi-app)'
        required: true
        type: string
      dockerhub_username:
        description: 'Usuario de Docker Hub (texto literal, no secret)'
        required: true
        type: string
      environment:
        description: 'Entorno de deployment (pro/pre/staging/dev)'
        required: false
        type: string
        default: 'dev'
      # ═══════════════════════════════════════════════════════════
      # 🆕 NUEVOS INPUTS PARA CLONAR REPOSITORIO EXTERNO
      # ═══════════════════════════════════════════════════════════
      external_repo:
        description: 'Repositorio externo a clonar (ej: dariasmoises979-blip/app)'
        required: false
        type: string
        default: ''
      external_repo_ref:
        description: 'Branch/tag/SHA del repositorio externo (default: main)'
        required: false
        type: string
        default: 'main'
      external_repo_path:
        description: 'Directorio donde clonar el repo externo (default: ./external)'
        required: false
        type: string
        default: './external'
      # ═══════════════════════════════════════════════════════════
      dockerfile_path:
        description: 'Ruta al Dockerfile (relativo al contexto)'
        required: false
        type: string
        default: './Dockerfile'
      build_context:
        description: 'Directorio de contexto para el build'
        required: false
        type: string
        default: '.'
      additional_tags:
        description: 'Tags adicionales separados por coma (ej: v1.0.0,stable)'
        required: false
        type: string
        default: ''
      # ═══════════════════════════════════════════════════════════
      # 🆕 INPUTS PARA REPOSITORIO EXTERNO
      # ═══════════════════════════════════════════════════════════
      external_repo:
        description: 'Repositorio externo a clonar (ej: dariasmoises979-blip/app)'
        required: false
        type: string
        default: ''
      external_repo_ref:
        description: 'Branch/tag/SHA del repositorio externo (default: main)'
        required: false
        type: string
        default: 'main'
      external_repo_path:
        description: 'Directorio donde clonar el repo externo (default: ./external)'
        required: false
        type: string
        default: './external'
    secrets:
      DOCKERHUB_TOKEN:
        description: 'Token de autenticación de Docker Hub'
        required: true
      EXTERNAL_REPO_TOKEN:
        description: 'Token para clonar repositorio privado (opcional)'
        required: false
      EXTERNAL_REPO_TOKEN:
        description: 'Token para clonar repositorio privado (opcional)'
        required: false

jobs:
  # ═══════════════════════════════════════════════════════════
  # 🐳 JOB: BUILD & PUSH DOCKER IMAGE
  # ═══════════════════════════════════════════════════════════
  docker-build-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      # ═══════════════════════════════════════════════════════════
      # 📥 PASO 1: CHECKOUT DEL REPOSITORIO ACTUAL
      # ═══════════════════════════════════════════════════════════
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      # ═══════════════════════════════════════════════════════════
      # 📥 PASO 2: CHECKOUT DEL REPOSITORIO EXTERNO (OPCIONAL)
      # ═══════════════════════════════════════════════════════════
      # Solo se ejecuta si se especificó un repositorio externo
      - name: Checkout external repository
        if: inputs.external_repo != ''
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.external_repo }}
          ref: ${{ inputs.external_repo_ref }}
          path: ${{ inputs.external_repo_path }}
          token: ${{ secrets.EXTERNAL_REPO_TOKEN || github.token }}
          fetch-depth: 0

      # ═══════════════════════════════════════════════════════════
      # 🔍 PASO 3: VERIFICAR ESTRUCTURA DE ARCHIVOS
      # ═══════════════════════════════════════════════════════════
      - name: Verify file structure
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📂 FILE STRUCTURE VERIFICATION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📁 Current directory:"
          pwd
          echo ""
          echo "📋 Directory listing:"
          ls -la
          echo ""
          if [[ -n "${{ inputs.external_repo }}" ]]; then
            echo "📦 External repo directory (${{ inputs.external_repo_path }}):"
            ls -la ${{ inputs.external_repo_path }} || echo "❌ Directory not found"
            echo ""
          fi
          echo "🔍 Build context (${{ inputs.build_context }}):"
          ls -la ${{ inputs.build_context }} || echo "❌ Directory not found"
          echo ""
          echo "📄 Dockerfile location (${{ inputs.dockerfile_path }}):"
          ls -la ${{ inputs.dockerfile_path }} || echo "❌ File not found"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ═══════════════════════════════════════════════════════════
      # 🏷️ PASO 4: GENERAR TAGS DINÁMICOS
      # ═══════════════════════════════════════════════════════════
      - name: Generate dynamic tags
        id: tags
        run: |
          ENVIRONMENT="${{ inputs.environment }}"
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          BRANCH_NAME="${{ github.ref_name }}"
          
          TAGS=()
          TAGS+=("${ENVIRONMENT}")
          TAGS+=("${ENVIRONMENT}-${SHORT_SHA}")
          TAGS+=("${COMMIT_SHA}")
          TAGS+=("${SHORT_SHA}")
          
          if [[ "${BRANCH_NAME}" == "main" || "${BRANCH_NAME}" == "master" ]]; then
            TAGS+=("latest")
          fi
          
          SAFE_BRANCH_NAME=$(echo "${BRANCH_NAME}" | sed 's/\//-/g')
          TAGS+=("${SAFE_BRANCH_NAME}-${SHORT_SHA}")
          
          if [[ -n "${{ inputs.additional_tags }}" ]]; then
            IFS=',' read -ra EXTRA_TAGS <<< "${{ inputs.additional_tags }}"
            for tag in "${EXTRA_TAGS[@]}"; do
              tag=$(echo "${tag}" | xargs)
              if [[ -n "${tag}" ]]; then
                TAGS+=("${tag}")
              fi
            done
          fi
          
          DOCKER_TAGS=""
          for tag in "${TAGS[@]}"; do
            DOCKER_TAGS="${DOCKER_TAGS}${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${tag},"
          done
          DOCKER_TAGS="${DOCKER_TAGS%,}"
          
          echo "tags=${DOCKER_TAGS}" >> $GITHUB_OUTPUT
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🏷️  TAGS GENERADOS PARA LA IMAGEN DOCKER"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Imagen base: ${{ inputs.docker_image }}"
          echo "🌍 Entorno: ${ENVIRONMENT}"
          echo "🔗 Commit SHA: ${COMMIT_SHA}"
          echo "🌿 Rama: ${BRANCH_NAME}"
          if [[ -n "${{ inputs.external_repo }}" ]]; then
            echo "📦 Repositorio externo: ${{ inputs.external_repo }}"
            echo "🌿 Ref externo: ${{ inputs.external_repo_ref }}"
          fi
          echo ""
          echo "📋 Lista de tags:"
          for tag in "${TAGS[@]}"; do
            echo "   • ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${tag}"
          done
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ═══════════════════════════════════════════════════════════
      # ⚙️ PASO 5: CONFIGURAR DOCKER BUILDX
      # ═══════════════════════════════════════════════════════════
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      # ═══════════════════════════════════════════════════════════
      # 🔐 PASO 6: LOGIN EN DOCKER HUB
      # ═══════════════════════════════════════════════════════════
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ inputs.dockerhub_username }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      # ═══════════════════════════════════════════════════════════
      # 🏗️ PASO 7: BUILD & PUSH DE LA IMAGEN DOCKER
      # ═══════════════════════════════════════════════════════════
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.build_context }}
          file: ${{ inputs.dockerfile_path }}
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ inputs.environment }}-${{ github.sha }}

      # ═══════════════════════════════════════════════════════════
      # 📊 PASO 8: REPORTE DE BUILD EXITOSO
      # ═══════════════════════════════════════════════════════════
      - name: Build Summary Report
        if: success()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ DOCKER IMAGE BUILD & PUSH SUCCESSFUL"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🐳 Docker Hub: https://hub.docker.com/r/${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}"
          echo "📦 Image Name: ${{ inputs.docker_image }}"
          echo "🌍 Environment: ${{ inputs.environment }}"
          echo "🔗 Commit SHA: ${{ github.sha }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "🕐 Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          if [[ -n "${{ inputs.external_repo }}" ]]; then
            echo "📦 External Repo: ${{ inputs.external_repo }} @ ${{ inputs.external_repo_ref }}"
          fi
          echo ""
          echo "📋 Pull Commands:"
          echo "   docker pull ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${{ inputs.environment }}"
          echo "   docker pull ${{ inputs.dockerhub_username }}/${{ inputs.docker_image }}:${GITHUB_SHA:0:7}"
          echo ""
          echo "🔗 Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      # ═══════════════════════════════════════════════════════════
      # ❌ PASO 9: MANEJO DE ERRORES
      # ═══════════════════════════════════════════════════════════
      - name: Build Failure Report
        if: failure()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "❌ DOCKER BUILD FAILED"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "⚠️  Possible reasons:"
          echo "   • Dockerfile syntax errors"
          echo "   • Missing dependencies in build context"
          echo "   • Docker Hub authentication issues"
          echo "   • Network or timeout problems"
          echo "   • Insufficient disk space"
          echo "   • External repository not accessible"
          echo ""
          echo "🔍 Debug steps:"
          echo "   1. Check Dockerfile at: ${{ inputs.dockerfile_path }}"
          echo "   2. Verify build context: ${{ inputs.build_context }}"
          echo "   3. Review Docker Hub credentials"
          if [[ -n "${{ inputs.external_repo }}" ]]; then
            echo "   4. Verify external repo access: ${{ inputs.external_repo }}"
            echo "   5. Check EXTERNAL_REPO_TOKEN if repo is private"
          fi
          echo "   6. Check workflow logs above for specific errors"
          echo ""
          echo "🔗 Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          exit 1